{--
  This package compiles and evaluates Frege code snippets, all in memory.
-}
module frege.script.FregeInterpreter where

import frege.IO
import frege.script.FregeScriptCompiler
import frege.compiler.Data
import Data.List
import frege.Version
import frege.java.Net

type JavaSource = String
type ErrorMessage = String
type Script = String

data CompilationResult = CompilationResult {
  javaSource :: JavaSource,     -- Compiler generated Java source code
  variableName :: Maybe String, -- Compiler generated variable name, if the script is an expression
  state :: Global --Compilation state
}

data ValueInfo a = ValueInfo {
  name :: String,           -- The name assigned to the expression
  showableValue :: Maybe a, --If the script is not a function, a frege value
                            --  which can be displayed later 
  symbol :: Symbol          -- The represented symbol in compilation
}

data EvalResult a = EvalResult {
  javaSource :: JavaSource,         -- Frege compiler generated Java source code 
  valueInfo :: Maybe (ValueInfo a), --Info if the script is an expression
  state :: Global                   --Compilation State
}

{--
 * evaluates the first argument script in the context of second argument script.
 * If the first script is an expression, a dynamic variable is created and assigned
 * with that expression. On successful evaluation, it returns:
 * 1) The generated Java Source
 * 2) The compilation state
 * 3) The generated variable name and the symbol it refers to in the compilation
 * 4) The value of the expression, If the value is not a function. Note: A variable with
 *    type (Num a) => a is still a function since the context needs to be applied
 *    hence the value will not be available.
 -}
eval :: Script -> Script -> String -> URLClassLoader -> IO (Either ErrorMessage (EvalResult a))
eval script predefs moduleName classLoader = do
  fregecRes <- compileTerm script predefs moduleName classLoader
  case fregecRes of
    -- The first script is a set of definitions
    Right CompilationResult{javaSource=jsrc,variableName=Nothing,state=state} ->
      return • Right $ EvalResult{javaSource=jsrc, 
                                  valueInfo=Nothing, 
                                  state=state}
    -- The first script is an expression 
    Right CompilationResult{javaSource=jsrc,variableName=Just var,state=state} -> do
      let symbol = unJust $ lookupSymbol state var
      --Not a function, so can be displayed
      if isShowable state symbol then do
        v <- executeClass jsrc moduleName var state.sub.loader
        case v of
          Left err -> return $ Left err
          Right value -> do
            let valueInfo = ValueInfo{name=var, 
                                      showableValue=Just value, 
                                      symbol=symbol}
            return • Right $ EvalResult{javaSource=jsrc, 
                                         valueInfo=Just valueInfo, 
                                         state=state}
      --A function, so there is no value
      else do
        let valueInfo = ValueInfo{name=var, 
                                  showableValue=Nothing, 
                                  symbol=symbol}
        return • Right $ EvalResult{javaSource=jsrc, 
                                     valueInfo=Just valueInfo, 
                                     state=state}
    Left err -> return $ Left err

{--
 * Frege source code in-memory compilation.
 * It compiles the first argument script in the context of second argument script.
 * If the first script is an expression, a dynamic variable is created and assigned
 * with that expression. On successful compilation, it returns:
 * 1) The generated Java Source
 * 2) The generated variable name if the first script is an expression
 * 3) Compilation State 
-}
compileTerm :: Script -> Script -> String -> URLClassLoader -> IO (Either ErrorMessage CompilationResult)
compileTerm script predefs moduleName classLoader = do
  outStringWriter <- StringWriter.new () -- A compiler output writer
  outWriter <- outStringWriter.printer
  javaSourceStringWriter <- StringWriter.new () -- Java source will be written here
  (variableName, compilerState) <- FregeScriptCompiler.compile script ["."] [] 
    outWriter javaSourceStringWriter classLoader predefs moduleName
  if (Global.errors compilerState == 0) then do --No compilation errors
    javaSource <- javaSourceStringWriter.toString
    case variableName of 
      "" -> do --Definitions
        return • Right $ CompilationResult{javaSource=javaSource, 
                                           variableName=Nothing, 
                                           state=compilerState}
      _ -> do --An expression
        return • Right $ CompilationResult{javaSource=javaSource, 
                                           variableName=Just variableName, 
                                           state=compilerState}
  else do --Compilation error. Accumulate the error messages along with their position.
    newLine <- newLine
    msgToText m = show (Message.pos m) ++ ": " ++ m.text
    let messages = intercalate newLine $ map msgToText compilerState.sub.messages
    return $ Left messages

compileScripts :: [Script] -> URLClassLoader -> IO (Either [ErrorMessage] URLClassLoader)
compileScripts [] loader = return $ Right loader
compileScripts scripts classLoader = do
  let initial = return ([], classLoader)
  let compilationResults = (foldl f initial scripts)
      f :: (IO ([Either ErrorMessage CompilationResult], URLClassLoader)) -> 
        Script -> (IO ([Either ErrorMessage CompilationResult], URLClassLoader))
      f sofar s = do
        (res, loader) <- sofar
        thisRes <- compileTerm s "" "" loader
        case thisRes of
          Left err -> return (thisRes : res, loader)
          Right compilationResult -> return (thisRes : res, compilationResult.state.sub.loader)
      failed results = map snd $ filter (isLeft . fst) $ zip results scripts
      errorMessages results = map (\(Left err) -> err) . filter isLeft $ results
  (res, loader) <- compilationResults
  let results = reverse res
  let failedScripts = failed results
  case failedScripts of
    [] -> return (Right loader) --All success
    xs -> case dropWhile isRight results of
            xs | all isLeft xs -> return . Left $ errorMessages results
               | otherwise     -> compileScripts failedScripts loader
            
isRight :: Either a b -> Bool
isRight (Right _) = true
isRight _ = false

isLeft = not . isRight

{--
 * Calls the @show@ function on the passed script
 * [requires] the script must be an expression
 * [returns] the result of the @show@ call, of course, a @String@
-}              
private invokeShow predefs varName moduleName state symbol classLoader = do
  let showScript = buildShowScript varName state symbol
  res <- eval showScript predefs moduleName classLoader
  case res of
    Left err -> return $ Left err
    Right EvalResult{valueInfo=Just(ValueInfo{showableValue=Just val})} ->
      return $ Right (Object.toString $ asObject val)
    otherwise -> error "Assertion failed: show script should result in an expression!" 

{--
 * [returns] the show script for the passed symbol. If the symbol is of type IO,
 *           it is "executed" and then @show@ is applied.
 * [requires] the script must represent an expression
-}    
buildShowScript varName state symbol = 
  if isIO state symbol then "show $ IO.performUnsafe " ++ varName
  else "show $ " ++ varName
  
{--
 * Java source code in-memory compilation and evaluation
 * [params] Class name, Variable Name, Class Loader
 * [returns] the evaluated variable value, if successful compilation; otherwise
 *           the compilation error message
-}
native executeClass frege.script.JavaUtils.execute :: 
  JavaSource -> String -> String -> ClassLoader -> IO (Either ErrorMessage a)

{--
 * A convenience function combining compilation and evaluation of the first
 * passed script in the context of second script. It always returns a @String@
 * result. If the first script is a set of definitions, then the result is a 
 * blank String. If the first script is an expression, then the result is the
 * String value of the expression. If the expression is of type IO, it is "executed"
 * and the result of the IO action is returned as a String. The values are converted
 * to String by implicitly applying to the "show" so it would be an error, if the
 * value is not an instance of @Show@.
 *
 * This function also supports the following commands which can be passed in place
 * of the first script:
 * 1) ":t <expr>" returns the type of the expression, 'expr'
 * 2) ":l" returns the list of identifiers along with the types compiled in the
 *    second script
 * 3) ":version" returns the Frege compiler version
 *
 * This function along with the result, also returns the new script combining
 * the first script and the second script. If the first script is an expression,
 * the expression is assigned a name and appended to the second script and then
 * returned. This new script can then be passed again as the context script to
 * simulate a session effect.
-}
executeCommand :: Script -> Script -> String -> URLClassLoader -> IO (Either ErrorMessage (String, Script))

--returns the Frege compiler version
executeCommand ":version" predefs _ _ = return $ Right (version, predefs)

--lists the identifiers along with the types from the second script
executeCommand (_~#^:[lL]#) predefs moduleName classLoader = do
  res <- compileTerm predefs "" moduleName classLoader
  newLine <- newLine
  case res of
    Right (CompilationResult{state=state}) -> 
      return $ Right(intercalate newLine $ showSymbols state, predefs)
    _ -> return $ Right ("", predefs)

--returns the type of an expression
executeCommand (m~#^:[tT].*?\s+(.*)#) predefs moduleName classLoader = 
  case m.group 1 of
    Just expr -> do
      res <- compileTerm expr predefs moduleName classLoader
      case res of
        Right (CompilationResult{variableName=Just name,state=state}) -> do
          let symbol = unJust $ lookupSymbol state name
          let typ = getSymbolType symbol state
          return $ Right (typ, predefs)
        Right _ -> return $ Left "Not an expression"
        Left err -> return $ Left err
    Nothing -> return $ Left "Expected an expression"

--Invalid command
executeCommand (_~#^:#) _ _ _ = return $ Left "Invalid Command!"

--execute the first script in the context of second script
executeCommand script predefs moduleName classLoader = do
  res <- eval script predefs moduleName classLoader
  newLine <- newLine
  case res of
    -- A set of Definitions
    Right (EvalResult{valueInfo=Nothing,state=state}) -> 
      return $ Right ("", predefs ++ newLine ++ script)
    
    -- An expression
    Right (EvalResult{valueInfo=Just valueInfo,state=state}) -> do
      let newScript = predefs ++ newLine ++ (variableDeclScript valueInfo.name script)
      case valueInfo.showableValue of
          --Not a function, so can be displayed
          Just showableValue ->
            --a string, just returns it's value
            if isString state valueInfo.symbol then do
              let value = Object.toString $ asObject showableValue
              return • Right $ (valueInfo.name ++ " = " ++ value, newScript)
            --Not a string, call "show"  
            else do
              showRes <- invokeShow newScript valueInfo.name moduleName state 
                valueInfo.symbol classLoader
              case showRes of
                Left err -> do
                  return • Left $ err
                Right val -> do
                  let value = Object.toString $ asObject val
                  return • Right $ (valueInfo.name ++ " = " ++ value, newScript)
          
          -- A function, just return it's type information        
          otherwise -> do
            let symbolType = getSymbolType valueInfo.symbol state
            return • Right $ (valueInfo.name ++ " :: " ++ symbolType, newScript)
            
    Left err -> return $ Left err
    
  