{--
  This package compiles and evaluates Frege code snippets, all in memory.
-}
module frege.interpreter.FregeInterpreter where

import frege.interpreter.FregeScriptCompiler
import frege.compiler.Data
import Data.List
import frege.Version
import frege.java.Net 


type Script = String

data Options = Options {moduleName :: String}

data InterpreterState = InterpreterState {
  loader :: URLClassLoader,
  classes :: JMap String ByteArr, --a Java Map for interop to call javac in native code
  options :: Options,
  history :: [String],
  currentScript :: String
} 

data SourceInfo = Expression {varName :: String} | Declarations

data CompilationInfo = CompilationInfo {
  javaSource :: String, 
  sourceInfo :: SourceInfo, 
  state :: Global --Compilation state
}

data CompilationResult = CompilationSuccess CompilationInfo |
                         CompilationFailure [String]

data SymbolInfo a = SymbolInfo {value :: Maybe a, symbol :: Symbol, name :: String}

data EvalResult a = EvalSuccess {
                        compilationInfo :: CompilationInfo,
                        symbolInfo :: Maybe (SymbolInfo a)
                      }
                    | EvalFailure [String]


eval :: Script -> Interpreter (EvalResult a)
eval source = do
  fregecRes <- compileTerm source
  s <- Interpreter.get
  case fregecRes of
    -- The script is a set of definitions
    CompilationSuccess (c@CompilationInfo{javaSource=jsrc,sourceInfo=Declarations,state=state}) ->
      return EvalSuccess{compilationInfo=c, symbolInfo=Nothing}
    -- The script is an expression 
    CompilationSuccess (c@CompilationInfo{javaSource=jsrc,
                             sourceInfo=Expression{varName=var},
                             state=state}) -> do
      let symbol = unJust $ lookupSymbol state var
      --Not a function, so can be displayed
      if isShowable state symbol then do
        v <- liftIO $ executeClass jsrc s.options.moduleName var state.sub.loader
        case v of
          Left err -> return $ EvalFailure [err.getMessage]
          Right value -> do
            return EvalSuccess{compilationInfo = c, 
                               symbolInfo=Just $ SymbolInfo (Just value) symbol var}
      --A function, so there is no value
      else do
        return EvalSuccess{compilationInfo = c,  
                           symbolInfo=Just $ SymbolInfo Nothing symbol var}
    CompilationFailure err -> return $ EvalFailure err
    
compileTerm :: Script -> Interpreter CompilationResult
compileTerm src = do
  s <- Interpreter.get
  outStringWriter <- liftIO $ StringWriter.new () -- A compiler output writer
  outWriter <- liftIO $ outStringWriter.printer
  javaSourceStringWriter <- liftIO $ StringWriter.new () -- Java source will be written here
  memloader <- liftIO $ MemoryClassLoader.new s.loader s.classes
  (variableName, compilerState) <- liftIO $ FregeScriptCompiler.compile src ["."] [] 
    outWriter javaSourceStringWriter memloader s.currentScript s.options.moduleName
  if (Global.errors compilerState == 0) then do --No compilation errors
    javaSource <- liftIO $ javaSourceStringWriter.toString
    memloader <- liftIO $ asMemoryClassLoader $ compilerState.sub.loader
    newclasses <- liftIO $ memloader.getClasses
    Interpreter.put $ s.{classes=newclasses}
    case variableName of 
      "" -> do --Definitions
        return . CompilationSuccess $ CompilationInfo{
                                        javaSource=javaSource, 
                                        sourceInfo=Declarations, 
                                        state=compilerState}
      _ -> do --An expression
        return . CompilationSuccess $ CompilationInfo{javaSource=javaSource, 
                                           sourceInfo=Expression variableName, 
                                           state=compilerState}
  else do --Compilation error. Accumulate the error messages along with their position.
    msgToText m = show (Message.pos m) ++ ": " ++ m.text
    let messages = intercalate newLine $ map msgToText compilerState.sub.messages
    return $ CompilationFailure [messages]

invokeShow :: String -> Interpreter (EvalResult a, Either [String] String)
invokeShow script = do
  res <- eval  script
  case res of
    EvalFailure err -> return (res, Left err)
    EvalSuccess {compilationInfo=c, symbolInfo=Just sym} -> case sym.value of
      Nothing -> do --A function
            let symbolType = getSymbolType sym.symbol c.state
            return (res, Right symbolType)
      Just value ->
            if isString c.state sym.symbol then do
                obj <- liftIO $ asObject value
                s <- liftIO $ obj.toString
                return  (res, Right s)
            else do
                state <- Interpreter.get
                let originalScript = state.currentScript
                Interpreter.put $ state.{currentScript <- (++ newLine ++ sym.name ++ " = " ++ script)}
                let showScript = buildShowScript sym.name c.state sym.symbol
                (evalRes, showResult) <- invokeShow showScript
                Interpreter.put $ state.{currentScript = originalScript}
                case showResult of {
                    Right showValue -> return (res, Right showValue);
                    Left errs -> return (res, Left errs)
                }
    EvalSuccess {compilationInfo=c, symbolInfo=Nothing} -> --Multiple declarations
      return (res, Right "")

                 
typeOfExpression :: String -> Interpreter (EvalResult a, Either [String] String)
typeOfExpression script = do
  res <- eval script
  case res of
    EvalFailure err -> return (res, Left err)
    EvalSuccess {compilationInfo=c, symbolInfo=Just sym} -> do
            let symbolType = getSymbolType sym.symbol c.state
            return (res, Right symbolType)
    EvalSuccess {compilationInfo=c, symbolInfo=Nothing} -> --Multiple declarations
      return (res, Right "Not an expression!")
      
{--
 * [returns] the show script for the passed symbol. If the symbol is of type IO,
 *           it is "executed" and then @show@ is applied.
 * [requires] the script must represent an expression
-}    
buildShowScript varName state symbol = 
  if isIO state symbol then "show $ IO.performUnsafe " ++ varName
  else "show $ " ++ varName
  
native executeClass frege.memoryjavac.JavaUtils.execute :: 
  String -> String -> String -> ClassLoader -> IO (Either ScriptException a)

pure native toLowerCase :: String -> String
pure native trim :: String -> String
    
data StateT s m a = StateT { runStateT :: (s -> m (a,s)) }
 
instance Monad (Monad m) => StateT s m where
  return a         = StateT (\s -> return (a,s))
  (StateT x) >>= f = StateT t where
    t s = do
      (v,s') <- x s          -- get new value and state
      StateT.runStateT (f v) s'     -- pass them to f
       
       
instance MonadPlus (MonadPlus m) => (StateT s m) where
    mzero = StateT (\s -> mzero)
    (StateT x1) `mplus` (StateT x2) = StateT (\s -> (x1 s) `mplus` (x2 s))
                                                        
 
evalStateT m s = liftM fst (StateT.runStateT m s)
 
state :: Monad m
      => (s -> (a, s))  -- ^pure state transformer
      -> StateT s m a   -- ^equivalent state-passing computation
state f = StateT (return . f)
 
class MonadTrans t where
  -- | Lift a computation from the argument monad to the constructed monad.
  lift :: Monad m => m a -> t m a
   
instance MonadTrans (StateT s) where
    lift c = StateT (\s -> c >>= (\x -> return (x,s)))
    
class MonadIO (Monad m) => m where
    -- | Lift a computation from the 'IO' monad.
    liftIO :: IO a -> m a

data Interpreter a = Interpreter { 
  unInterpreter :: StateT InterpreterState IO a } where
  --MonadState functions
  get = Interpreter (StateT (\s -> return (s,s)))
  put s = Interpreter (StateT (\_ -> return ((), s)))
  modify f = do
      s <- Interpreter.get
      Interpreter.put (f s)
 
instance Monad Interpreter where
  return a = Interpreter $ return a
  (Interpreter x) >>= f = Interpreter $ x >>= (\y -> Interpreter.unInterpreter $ f y)
                         
instance MonadIO Interpreter where
    liftIO = Interpreter . lift
    
--runInterpreter :: Interpreter a -> InterpreterState -> IO (EvalResult a)
runInterpreter interpreter state = 
  evalStateT (Interpreter.unInterpreter interpreter) state
  