{--
  This package compiles and evaluates Frege code snippets, all in memory.
-}
module frege.interpreter.FregeInterpreter where


import Compiler.Scanner hiding (main, is, interpret)
import Compiler.Main(stdOptions, format,
  make, parsePass, postTrue, getOperators)
import Compiler.GUtil as GUtil()
import Lib.PP(TEXT)
import Data.List
import Data.Maybe
import Java.IO()
import Data.TreeMap (Tree, values)
import Compiler.Nice (text, msgdoc)
import Compiler.Classtools  as CT(FregePackage)
import Compiler.Data hiding (Message, Severity)
import Compiler.Data (Severity(), Message CompilerMessage)
import Compiler.Utilities   as U()
import Compiler.Scanner     as Lex()
import Compiler.Grammar     as Parse()
import Compiler.Fixdefs     as P1()
import Compiler.Import      as P2()
import Compiler.Enter       as P3()
import Compiler.TAlias      as P4()
import Compiler.Transdef    as P5()
import Compiler.Classes     as P6()
import Compiler.Transform   as P7()
import Compiler.Typecheck   as TC()
import Compiler.GenMeta     as GM()
import Compiler.gen.Util    as GU()
import Compiler.GenJava7    as G7()
import Compiler.EclipseUtil as EU()
import Compiler.DocUtils as DU(docit, docSym, DL, Doc, emitHtml)
import Compiler.Import(getFP, importClass)
import Java.Net
import Data.Map as M()

--- utility function to create 'Options' data structure
createopts sp flags dir path prefix source = stdOptions.{
                                source = source,
                                sourcePath = sp,
                                flags, dir,
                                path = path,
                                prefix}

standardOptions exld = do
    cache <- Ref.new Tree.empty -- start out with empty cache
    return Global {
            options = stdOptions,
            sub = Sub {
                cache,
                loader = exld,
                optab = Tree.empty,
                toks = Array.fromList [],
                idKind = Tree.empty,
                definitions = [],
                packageDoc = Nothing,
                thisPos  = Position.null,
                nsPos = Tree.empty,
                thisPack = Pack.new "",
                errors  = 0,
                messages = [],
                cancelled = return false,
                nextPass = 1,
                stderr = IO.stderr,
                toExport = []
            },
            gen = Gen {
                printer = IO.stdout,
                tunique = 0,
                runique = 0,
                sunique = 0,
                xunique = 1,
                kunique = 1,
                tTree = Tree.empty,
                rTree = Tree.empty,
                sTree = Tree.empty,
                xTree = Tree.empty .insert GU.defEA 0,        -- so that 0 never indexes valid expression
                kTree = Tree.empty .insert (KindA {kind=0, suba=0, subb=0}) 0, -- kind0 = *
                consts = Tree.empty,
                lambdas = Tree.empty,
                syminfo = Tree.empty,
                jimport = Tree.empty,
            },
            unique = 1,
            packages = Tree.empty,
            namespaces = Tree.empty,
            genEnv = [],
            javaEnv = Tree.empty,
            locals = Tree.empty,
            typEnv = [],
            tySubst = Tree.empty
        }

data SourceInfo = Module | Definitions | Expression {variableName :: String}

derive Show SourceInfo

findScriptType :: String -> String -> StG SourceInfo
findScriptType src predefs = do
  runpass (lexPass src,         "lexical analysis                      ", postTrue)
  g <- getST
  if g.errors == 0
    then scriptTypePass src predefs
    else return SourceInfo.Module

scriptTypePass src predefs = do
  g <- getST
  let tokens = filter noComment g.sub.toks.toList
  case tokens of
    [] -> return SourceInfo.Module
    (Token{tokid=PACKAGE}) : _ -> return SourceInfo.Module
    _ -> do
      isExpr <- isExpressionPass src predefs
      if isExpr
        then return $ SourceInfo.Expression $ findUnusedVariableName predefs
        else return SourceInfo.Definitions

noComment Token{tokid} = tokid != COMMENT && tokid != DOCUMENTATION

data JavagenResult = JavagenResult
                     {
                       javaSource :: String,
                       classLoader :: MemoryClassLoader,
                       state :: Global
                     }

data TypecheckResult = TypecheckResult
                       {
                         sourceInfo :: SourceInfo,
                         state :: Global
                       }

data Environment = Environment {
  loader :: MemoryClassLoader,
  predefs :: [String],
  transformDefs :: [DefinitionT] -> [DefinitionT]
} where
  private defaultST = do
                loader <- MemoryClassLoader.new ()
                cl <- Mutable.freeze loader
                return $ Environment {
                                            loader = cl,
                                            predefs = [],
                                            transformDefs = id
                                         }
  default = ST.run defaultST

javagen :: Global -> Environment -> (Global | JavagenResult)
javagen g env = IO.performUnsafe $ do
  outWriter <- StringWriter.new () >>= StringWriter.printer
  javaSourceWriter <- StringWriter.new () -- Java source will be written here
  classLoader <- Mutable.thaw env.loader
  javac <- MemoryJavaCompiler.new classLoader
  let steps = javagenPasses javaSourceWriter javac
      global = snd $ StG.run (foreach steps runpass) g
  if (Global.errors global == 0)
    then do
      classLoader <- javac.classLoader >>= Mutable.freeze
      javaSource <- javaSourceWriter.toString
      return . Right $ JavagenResult {
                       javaSource=javaSource,
                       state=global,
                       classLoader=classLoader }
    else return . Left $ global

typecheck :: String -> Environment -> (Global | TypecheckResult)
typecheck src env = IO.performUnsafe $ do
  outWriter <- StringWriter.new () >>= StringWriter.printer
  let predefs = concat . intersperse newLine $ reverse env.predefs
      moduleName = "frege.repl.Console"
      steps = typecheckPasses env.transformDefs
      flags = Flags.fromList [WARNINGS, HINTS, IDE]
  (sourceType, global) <- runcompiler src predefs ["."] flags "." [] "" outWriter env.loader steps moduleName
  if (Global.errors global == 0)
    then return . Right $ TypecheckResult {
                          sourceInfo=sourceType,
                          state=global
                         }
    else return . Left $ global

--- utility function to run the compiler, combines 'createopts' and 'runfregec'
runcompiler src predefs sp flags dir path prefix pw loader steps moduleName =
  runfregec src predefs opts pw loader steps moduleName
    where opts = createopts sp flags dir path prefix source
          source = fileName moduleName
          fileName s = (packed $ fileName' s.toList) ++ ".fr"
          fileName' cs = let (fst, snd) = break (== '.') cs in
                case snd of
                  []     -> fst
                  (x:xs) -> fileName' xs

--- utility function to run the compiler, callable from Java
runfregec !src !predefs !opts !pw loader steps moduleName = do
        global <- standardOptions loader
        let g0 = global.{options = opts}.{sub <- SubSt.{stderr=pw}}
        return $ StG.run (run src predefs steps moduleName) g0

{--
 * 'run' all passes, one after another
 * until one of them returns an error
 -}
run src predefs steps moduleName = do
    g <- getST
    scriptType <- findScriptType src predefs
    let source = buildScript src scriptType predefs moduleName
    changeST $ const g
    changeST Global.{gen <- GenSt.{printer=IO.stdout}}    -- just to have no undefined value there
    foreach (steps source) runpass
    g <- getST
    return scriptType

extractGlobal loader = IO.performUnsafe $ standardOptions loader

runpass (pass,description,post) = do
    state <- getST
    when (state.errors == 0) do
        (itemnm, items) <- pass
        state <- getST
        postconditionHolds <- if state.errors == 0 then post else stio true
        unless (postconditionHolds) do
            doio (state.stderr.println "FATAL: post condition violated")
            changeST Global.{sub <- SubSt.{errors <- (1+)}}
        stio ()

derive Show Severity

outlineModuleSymbols pack g = fst $ State.run (outlineModule' pack)  g where
    outlineModule' pack = do
        let p = Pack.new pack
        importClass Position.null p
        g <- getST
        case g.packages.lookup p of
            Nothing -> return []
            Just env -> return $ map (EU.label g) $ EU.symbols env

outlineSymbols :: Global -> [String]
outlineSymbols g = map (EU.label g) $ EU.symbols g.thisTab

newLine = maybe "\n" id $ System.getProperty "line.separator"

className global = show $ sub.thisPack.className global where sub = Global.sub global

moduleDeclScript moduleName = "module " ++ moduleName ++ " where"
variableDeclScript varName script = varName ++ " = \n" ++ (indent 2 script)

buildScript script SourceInfo.Definitions predefs moduleName =
  intercalate newLine [moduleDeclScript moduleName, predefs, script]
buildScript script SourceInfo.Expression{variableName=varName} predefs moduleName =
  intercalate newLine [moduleDeclScript moduleName, predefs, variableDeclScript varName script]
buildScript script SourceInfo.Module predefs _ = script

findUnusedVariableName script = "res" ++ show unusedVarNum where
  unusedVarNum = unJust $ find (not . flip elem used) [1..]
  used = reverse $ loop m []
  m = #res(\d+)#.matcher script
  loop :: Matcher -> [Int] -> [Int]
  loop m1 acc | Just m2 <- m1.find = loop m2 ((atoi . unJust $ m2.group 1) : acc)
              | otherwise = acc

symDoc sym global = fst $ StG.run (symbolDocumentationST sym) global
packageDoc pack global = fst $ StG.run (packDocumentationST pack) global
helpDoc src global = fst $ StG.run (helpDocST src) global

symbolDocumentationST :: Symbol -> StG String
symbolDocumentationST sym = do
    sw <-  doio $  StringWriter.new ()
    p  <-  doio $  StringWriter.printer sw
    changeST Global.{gen <- GenSt.{printer=p}}
    g <- getST
    let ds = docSym g sym
        dl = DL (Just "func") [ds]
        doc = Doc [dl]
    emitHtml false doc      -- html without CSS, swing does not understand
    doio $ g.printer.close
    result <- doio $ sw.toString
    return result

packDocumentationST :: String -> StG (Maybe String)
packDocumentationST pack = do
    g <- getST
    r <- getFP pack
    case r of
        Right (Just fp) -> case fp.doc of
            ""   -> return . Just $ ("Undocumented package " ++ pack)
            text -> do
                let doc = Doc $ docit g (Just text)
                sw <-  doio $  StringWriter.new ()
                p  <-  doio $  StringWriter.printer sw
                changeST Global.{gen <- GenSt.{printer=p}}
                emitHtml false doc      -- html without CSS, swing does not understand
                doio $ g.printer.close
                result <- doio $ sw.toString
                return . Just $ result
        Left ex -> return Nothing
        sonst   -> return . Just $ ("(java class?) " ++ pack)

sNameToQName sName = do
  g <- getST
  qNames <- U.resolve (VName g.thisPack) Position.null sName
  return (listToMaybe qNames)  -- Just taking first resolved

helpDocST :: String -> StG (Maybe String)
helpDocST source = do
  global <- getST
  qNameMay <- sNameToQName (createSName source)
  let symMay = qNameMay >>= (\qname -> qname.findit global)
  maybe (return Nothing) (\sym -> symbolDocumentationST sym >>= return . Just) symMay

resolveSymbol :: String -> StG (Maybe Symbol)
resolveSymbol source = do
                         global <- getST
                         qNameMay <- sNameToQName (createSName source)
                         return $ qNameMay >>= (\qname -> qname.findit global)
createSName s
  | Just (Just ns : Just ty : Just id : _) <- s `match` #^(.*)\.(.*)\.(\p{Lu}.*)$# = with2con ns ty id
  | Just (Just ns : Just ty : Just id : _) <- s `match` #^(.*)\.(.*)\.(.*)$#       = with2var ns ty id
  | Just (Just ty : Just id : _)           <- s `match` #^(.*)\.(\p{Lu}.*)$#       = with1con ty id
  | Just (Just ty : Just id : _)           <- s `match` #^(.*)\.(.*)$#             = with1var ty id
  | s ~ #^\p{Lu}.*$#                                                               = Simple (Token CONID s 1 0 0 [])
  | otherwise                                                                      = Simple (Token VARID s 1 0 0 [])
     where with2con ns ty id = With2 (qual ns) (qual ty) (con id)
           with2var ns ty id = With2 (qual ns) (qual ty) (var id)
           with1con ty id = With1 (qual ty) (con id)
           with1var ty id = With1 (qual ty) (var id)
           qual name = Token QUALIFIER name 1 0 0 []
           con name = Token CONID name 1 0 0 []
           var name = Token VARID name 1 0 0 []

match s regex = groups <$> s =~ regex where groups m = [m.group i | i <- [1..groupCount m]]

buildShowScript varName state symbol
  | isIO state symbol = "show $ IO.performUnsafe " ++ varName
  | otherwise         = "show $ " ++ varName

openPrinter pw = do
    g <- getST
    printer <- doio $ StringWriter.printer pw
    changeST Global.{gen <- GenSt.{printer=printer}}
    stio ("file", 1)

javagenPasses jw javac = [
    -- function       description                            post condition
    (P7.pass9,        "simplify expressions                  ", P7.post),   -- TRACE9
    (P7.pass8,        "globalize anonymous lambdas           ", P7.post),   -- TRACE8
    (P7.pass10,       "strictness analysis                   ", P7.post),   -- TRACES
    (openPrinter jw,     "open file                             ", postTrue),
    (GM.pass,         "generate meta data                    ", GM.post),   -- none
    (G7.pass,         "generate java code                    ", G7.post),  -- TRACEG
    (javacPass javac jw,           "run java compiler                     ", postTrue)
    ]

typecheckPasses f src = [
  -- function       description                            post condition
  (lexPass src,         "lexical analysis                      ", postTrue),
  (iparsePass f,      "syntax  analysis                      ", postTrue),
  (P1.pass,         "collecting definitions                ", P1.post),
  (P2.pass,         "symbol table initialization and import", P2.post),
  (P6.passI true,   "verify imported instances             ", P6.post),
  (P3.pass,         "enter definitions                     ", P3.post),
  (P4.pass,         "check type aliases                    ", P4.post),
  (P3.pass2,        "make field definitions                ", P3.post),
  (P3.pass3,        "enter (derived) instances             ", P3.post),
  (P5.pass,         "translate names in exprs and types    ", P5.post),
  (P6.passC,        "verify class definitions              ", P6.post),   -- TRACE6
  (P6.passI false,  "verify own instances                  ", P6.post),   -- TRACE6
  (P7.pass7,        "simplify lets                         ", P7.post),   -- TRACE7
  (TC.pass,         "type check                            ", TC.post)   -- TRACET, TRACEO
  ]

javacPass :: MutableIO MemoryJavaCompiler -> StringWriter -> StG (String, Int)
javacPass compiler src = do
  g <- getST
  let !packName = g.sub.thisPack.unpack g
  !jsrc <- doio $ src.toString
  res <- doio $ compiler.compile jsrc packName
  isSuccess <- doio $ res.isSuccess
  if !isSuccess
    then do
            msg <- doio $ res.errorsAsString
            U.error Position.null (TEXT msg)
            return ("javac", 1)
    else
      return ("javac", 0)

matching (_@TypDcl{name=x}) (_@TypDcl{name=y}) = x == y
matching (_@ClaDcl{name=x}) (_@ClaDcl{name=y}) = x == y
matching (_@AnnDcl{name=x}) (_@AnnDcl{name=y}) = x == y
matching (_@NatDcl{name=x}) (_@NatDcl{name=y}) = x == y
matching (_@FunDcl{name=x,pats=[]}) (_@FunDcl{name=y,pats=[]}) = x == y
matching (_@DatDcl{name=x}) (_@DatDcl{name=y}) = x == y
matching (_@JavDcl{name=x}) (_@JavDcl{name=y}) = x == y
matching _ _ = false

funcMatching (_@FunDcl{name=x}) (_@FunDcl{name=y}) = x == y
funcMatching _ _ = false

getSymbolType :: Symbol -> Global -> String
getSymbolType SymI{typ} !g = EU.verbose g typ
getSymbolType SymV{typ} !g = EU.verbose g typ
getSymbolType SymD{typ} !g = EU.verbose g typ
getSymbolType SymL{alias} !g = maybe "" (flip getSymbolType g) $ alias.findit g
getSymbolType _ _ = ""

showSymbols :: Global -> [String]
showSymbols g  = map (EU.label g) $ getSymbols g.thisTab

getSymbols :: Symtab -> [Symbol]
getSymbols tab = (sortBy positionAndName • filter wanted • values) tab
    where
        positionAndName a b = case Symbol.pos a <=> Symbol.pos b of
                                    Eq -> comparing (QName.base • Symbol.name) a b
                                    ne -> ne
        wanted :: Symbol -> Bool
        wanted sym
            | sym.{alias?}                       = true
            | Local{} <- sym.name                = true
            -- sym.vis == Private                 = false
            | sym.name.base ~ ´^(chg|upd|has|let|anon|lc)\$´ = false
            | otherwise                          = true


iparsePass f = do
    g       <- getST
    let tokens = (filter noComment g.sub.toks.toList)
    result <- Parse.pass tokens
    case result of
        Just (GUtil.Program.Module (packname, defs, doc)) -> do
            changeST Global.{sub <-  SubSt.{thisPack = Pack.new packname}}
            let ds = nubBy matching $ reverse defs
                fm (x:xs) (y:ys) = funcMatching x y
                fm _ _ = false
                uniqds = concat $ nubBy fm $ groupBy funcMatching ds
            changeST Global.{sub <- (SubSt.{definitions = reverse $ f uniqds}
                                     • SubSt.{packageDoc = Nothing})}
            stio ("tokens",  g.sub.toks.length)
        Just _ -> error "FATAL: Expected module"
        Nothing -> stio ("tokens", g.sub.toks.length)

indent n src = (unlines . map (spaces ++) . lines $ src) where
  spaces = concat $ replicate n " "

isExpressionPass :: String -> String -> StG Bool
isExpressionPass src predefs = do
    g       <- getST
    sw <- doio $ StringWriter.new ()
    pw <- doio $ sw.printer
    let varDecl = variableDeclScript "f" src
        modDecl = intercalate newLine ["module T where", predefs, varDecl]
    changeST Global.{sub <- SubSt.{stderr=pw}}
    runpass (lexPass modDecl, "lexical analysis                      ", postTrue)
    g <- getST
    if g.errors != 0
      then return false
      else do
        let tokens = filter noComment g.sub.toks.toList
        result <- Parse.pass tokens
        g <- getST
        return $ g.errors == 0

lexPass src = do
    changeST Global.{sub <- SubSt.{toks = Array.fromList []}
                            . SubSt.{definitions = []}
                            . SubSt.{packageDoc  = Nothing}
                            . SubSt.{thisPack    = Pack.new ""}}
    changeST Global.{locals = Tree.empty, typEnv = []}
    tokens <- Lex.passCS (CharSeq.fromString src) getOperators
    stio ("tokens", length tokens)

isVariable :: Global -> Symbol -> Bool
isVariable g SymV{name,typ} = case typ.rho of
  RhoFun _ _ _ = false
  RhoTau ctx _ = ctx == []
isVariable g SymD{} = true
isVariable g SymL{alias} = maybe false (isVariable g) $ alias.findit g
isVariable _ _ = false

isIO :: Global -> Symbol -> Bool
isIO g SymV{typ} = "ST RealWorld" `isPrefix` nice typ g where
                      isPrefix = isPrefixOf `on` toList
                      f `on` g = \x \y -> f (g x) (g y)
isIO g SymL{alias} = maybe false (isIO g) $ alias.findit g
isIO _ _ = false

isString g SymV{typ} = nice typ g == "StringJ Char"
isString g SymL{alias} = maybe false (isString g) $ alias.findit g
isString g _ = false

showThrowableCause t = maybe (showNative t) showNative $ throwableCause t

data ReplEnv = ReplEnv {
    lastExternalScript :: Maybe String,
    lastJavaSource :: Maybe String,
    prompt :: String,
    env :: Environment
} where
  default = ReplEnv {
    lastExternalScript = Nothing,
    lastJavaSource = Nothing,
    prompt = "frege> ", --Default prompt
    env = Environment.default
 }


data ReplResult = ReplResult {out :: ReplOut, env :: ReplEnv, messages :: [Message]}

data ReplOut = EvalError
             | EvalSuccess
             | Def
             | ModuleDef String
             | EvalNoOutput
             | Interpret String String

--eval :: Command -> ReplEnv -> ReplResult
interpret line state = case typecheck line state.env of
        Right (TypecheckResult {sourceInfo=sourceInfo,state=g}) ->
          let (javacInterpState, javacState) = javac g state
              messages                       = Message.translateCompilerMessages $ g.sub.messages
              fail                       = failure state javacInterpState
          in case sourceInfo of
            Module -> let success state = ReplResult (ModuleDef (className javacInterpState)) state messages
                      in maybe fail success javacState
            Definitions -> ReplResult EvalNoOutput state.{env <- Environment.{predefs <- ((:) line)}} messages
            Expression{variableName=var} ->
              maybe fail (\newState -> showVariable var line newState javacInterpState) javacState
        Left compilerState -> failure state compilerState

browseModule moduleName state = ReplResult res state msgs where
  global = extractGlobal state.env.loader
  (res, msgs) = (EvalSuccess, [Message INFO . intercalate newLine $ outlineModuleSymbols moduleName global])

browse state
 | [] <- state.env.predefs = ReplResult EvalNoOutput state []
 | otherwise = either (failure state) showSymbols $ typecheck currDefs state.env.{predefs=[]}
   where
    showSymbols (TypecheckResult {state=g}) = ReplResult res state msgs where
      (res, msgs) = (EvalSuccess, [Message INFO . intercalate newLine $ outlineSymbols g])
    currDefs = concat . intersperse newLine $ reverse state.env.predefs

typeof expr state = case typecheck expr state.env of
   Right (TypecheckResult {sourceInfo=Expression{variableName=var},state=g}) ->
      ReplResult res state msgs where
          (res, msgs) = maybe (EvalError, [Message ERROR "Not an expression!"])
                          (\s -> (EvalSuccess, [Message INFO $ getSymbolType s g])) symMaybe
          symMaybe = fst $ StG.run (resolveSymbol var) g
   Right (TypecheckResult {state=g})                         -> ReplResult EvalNoOutput state []
   Left compilerState -> failure state compilerState

docHelp source state
 | Right (TypecheckResult {state=g}) <- typecheck (currDefs state.env.predefs) state.env.{predefs=[]} = help g
 | otherwise      = fail
   where
     currDefs [] = "\"\""
     currDefs xs = concat . intersperse newLine $ reverse xs
     fail = ReplResult EvalError state [Message ERROR (source ++ " cannot be resolved!")]
     help g = maybe fail (\m -> ReplResult EvalSuccess state $ [Message INFO m]) $ helpDoc source g

data MessageType = INFO | ERROR | WARNING | HINT where
  translateCompilerMsgType Severity.HINT = HINT
  translateCompilerMsgType Severity.WARNING = WARNING
  translateCompilerMsgType Severity.ERROR = ERROR
derive Show MessageType

data Message = Message {msgType :: MessageType, text :: String} where
  showMessages = intercalate newLine . map show
  translateCompilerMessages [] = []
  translateCompilerMessages ((CompilerMessage.Msg pos sev text):ms) =
    Message (MessageType.translateCompilerMsgType sev) text : translateCompilerMessages ms

instance Show Message where
  show (Message INFO txt) = txt
  show (Message typ txt) = "[" ++ show typ ++ "]: " ++ txt

showVariable var source state g = maybe evalError showSym sym where
  sym = fst $ StG.run (resolveSymbol var) g
  evalError = ReplResult EvalError state [Message INFO (var ++ " cannot be resolved!")]
  showSym = showSymbol source state var g

showSymbol :: String -> ReplEnv -> String -> Global -> Symbol -> ReplResult
showSymbol source state var g symbol
  | isVariable g symbol = if isString g symbol
                            then ReplResult (Interpret className qname.base) state []
                            else interpret showScript newState
  | otherwise           = ReplResult EvalSuccess state [Message INFO (getSymbolType symbol g)]
    where
         newState = state.{env <- Environment.{predefs <- ((:) (variableDeclScript var source))}}
         showScript = buildShowScript var g symbol
         qname = symbol.name
         className = show $ qname.getpack.className g

failure :: ReplEnv -> Global -> ReplResult
failure replState interpreterState = ReplResult EvalError replState $
  Message.translateCompilerMessages interpreterState.sub.messages

javac :: Global -> ReplEnv -> (Global, Maybe ReplEnv)
javac global state = case javagen global state.env of
                       Right (JavagenResult {javaSource=javaSrc,state=g, classLoader=loader}) -> (g, Just newState) where
                         newState = state.{lastJavaSource=Just javaSrc, env<-Environment.{loader=loader}}
                       Left compilerState -> (compilerState, Nothing)

-- Native Definitions

data MemoryJavaCompiler = native frege.memoryjavac.MemoryJavaCompiler where
  native new :: Mutable s (JMap String ByteArr) -> STMutable s MemoryJavaCompiler
              | Mutable s MemoryClassLoader -> STMutable s MemoryJavaCompiler
  native compile :: Mutable s MemoryJavaCompiler -> String -> String -> STMutable s JavaCompilationInfo
  native classLoader :: Mutable s MemoryJavaCompiler ->  STMutable s MemoryClassLoader

data MemoryClassLoader = native frege.memoryjavac.MemoryClassLoader where
  native new :: () -> STMutable s MemoryClassLoader
              | ClassLoader -> IOMutable MemoryClassLoader
              | Mutable s (JMap String ByteArr) -> STMutable s MemoryClassLoader
  pure native classes :: MemoryClassLoader -> JMap String ByteArr

instance Cloneable MemoryClassLoader

data JavaCompilationInfo = native frege.memoryjavac.CompilationInfo where
  native isSuccess :: Mutable s JavaCompilationInfo -> ST s Bool
  native errorsAsString :: Mutable s JavaCompilationInfo -> ST s String
  native classLoader :: MutableIO JavaCompilationInfo -> IO ClassLoader
  native classes :: Mutable s JavaCompilationInfo -> STMutable s (JMap String ByteArr)

data ByteArr = mutable native "byte[]"

data JMap k v = native java.util.Map where
  native put :: Mutable s (JMap k v) -> k -> v -> ST s ()
  native get ::  Mutable s (JMap k v) -> k -> ST s (Maybe v)
  native putAll ::  Mutable s (JMap k v) ->  Mutable s (JMap k v) -> ST s ()
  native isEmpty :: Mutable s (JMap k v) -> ST s Bool

data HashMap k v = native java.util.HashMap where
  native new :: () -> STMutable s (HashMap k v)

pure native groupCount :: Matcher -> Int

native fieldValue frege.memoryjavac.JavaUtils.fieldValue ::
  String -> String -> MemoryClassLoader -> ST s (Maybe a) throws Throwable


pure native longToString Long.toString :: Long -> Int -> String

pure native showNative toString :: a -> String
pure native throwableCause getCause :: Throwable -> Maybe Throwable


data ObjectArr = native "java.lang.Object[]" where
    --- make a new mutable Object array
    native new    "java.lang.Object[]"
                                                :: Int -> STMutable s ObjectArr
    native getAt  "frege.runtime.Array.<java.lang.Object>arrayGet"
                                                :: Mutable s ObjectArr -> Int -> ST s (Maybe Object)
    native setAt  "frege.runtime.Array.<java.lang.Object>arraySet"
                                                :: Mutable s ObjectArr -> Int -> Object -> ST s ()
    pure native frozenGetAt "frege.runtime.Array.<java.lang.Object>arrayGet"
                                                :: ObjectArr -> Int -> Maybe Object
    --- use this only if it is absolutely sure that there are no nulls in the array
    pure native elemAt "frege.runtime.Array.<java.lang.Object>arrayGet"
                                                :: ObjectArr -> Int -> Object
    --- the length of the array
    pure native length "frege.runtime.Array.<java.lang.Object>arrayLen"
                                                :: ObjectArr -> Int
    toList (a::ObjectArr) = elems a 0
        where
            elems (a::ObjectArr) i
                | i < a.length = case frozenGetAt a i of
                    Just s  -> s:elems a (i+1)
                    Nothing -> elems a (i+1)
                | otherwise = []

    fromListST :: [Object] -> STMutable u ObjectArr
    fromListST objects = (ObjectArr.new objects.length >>= loop 0 objects) where
        loop j (x:xs) arr = do ObjectArr.setAt arr j x; loop (j+1) xs arr
        loop j []     arr = return arr
    fromList objects = ST.run (fromListST objects >>= readonly id)

data Method = pure native java.lang.reflect.Method where
  pure native getName :: Method -> String
