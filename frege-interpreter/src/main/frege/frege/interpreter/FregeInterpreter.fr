{--
  This package compiles and evaluates Frege code snippets, all in memory.
-}
module frege.interpreter.FregeInterpreter where

import frege.interpreter.FregeScriptCompiler
import frege.compiler.Data
import Data.List
import frege.Version
import frege.java.Net 


type Script = String

data Options = Options {moduleName :: String}

data InterpreterState = InterpreterState {
  loader :: URLClassLoader,
  classes :: JMap String ByteArr, --a Java Map for interop to call javac in native code
  options :: Options,
  currentScript :: String
} 

data CompilationInfo = CompilationInfo {
  javaSource :: String, 
  sourceInfo :: SourceInfo, 
  state :: Global --Compilation state
}

data CompilationResult = CompilationSuccess CompilationInfo |
                         CompilationFailure [String]

evalShow :: Script -> Interpreter (Either [String] String)
evalShow source = do
  fregecRes <- compile source
  case fregecRes of
    -- The script is a set of definitions
    CompilationSuccess (c@CompilationInfo{sourceInfo=sourceInfo,state=g}) ->
        case sourceInfo of
            Module -> return $ Left ["Not an expression!"]
            Definitions -> return $ Left ["Not an expresssion!"]
            Expression{variableName=var} -> showVariable source var g
    CompilationFailure err -> return $ Left err

showVariable source var g = do
      let symbolMay = lookupVarSymbol g.thisTab var
      case symbolMay of
        Nothing -> return . Left $ ["Not found: " ++ var]
        Just symbol -> showSymbol source var symbol g
        
showSymbol source var symbol g | isVariable g symbol = do
    state <- Interpreter.get
    if isString g symbol then do
        v <- liftIO $ fieldValue state.options.moduleName var g.sub.loader
        case v of
            Left err -> return $ Left [err.getMessage]
            Right value -> do
                obj <- liftIO $ asObject value
                s <- liftIO $ obj.toString
                return $ Right s
    else do
        Interpreter.put $ state.{currentScript <- (++ newLine ++ var ++ " = " ++ source)}
        let showScript = buildShowScript var g symbol
        showResult <- evalShow showScript
        return showResult
showSymbol _ _ symbol g = return . Right $ getSymbolType symbol g
                
compile :: Script -> Interpreter CompilationResult
compile src = do
  s <- Interpreter.get
  outStringWriter <- liftIO $ StringWriter.new () -- A compiler output writer
  outWriter <- liftIO $ outStringWriter.printer
  javaSourceStringWriter <- liftIO $ StringWriter.new () -- Java source will be written here
  memloader <- liftIO $ MemoryClassLoader.new s.loader s.classes
  (sourceInfo, compilerState) <- liftIO $ FregeScriptCompiler.compile src ["."] [] 
    outWriter javaSourceStringWriter memloader s.currentScript s.options.moduleName
  if (Global.errors compilerState == 0) then do --No compilation errors
    javaSource <- liftIO $ javaSourceStringWriter.toString
    memloader <- liftIO $ asMemoryClassLoader $ compilerState.sub.loader
    newclasses <- liftIO $ memloader.getClasses
    Interpreter.put $ s.{classes=newclasses}
    return . CompilationSuccess $ CompilationInfo{
                                        javaSource=javaSource, 
                                        sourceInfo=sourceInfo, 
                                        state=compilerState}
  else do --Compilation error. Accumulate the error messages along with their position.
    msgToText m = show (Message.pos m) ++ ": " ++ m.text
    let messages = intercalate newLine $ map msgToText compilerState.sub.messages
    return $ CompilationFailure [messages]

typeOfExpression :: String -> Interpreter (Either [String] String)
typeOfExpression script = do
  fregecRes <- compile script
  case fregecRes of
    -- The script is a set of definitions
    CompilationSuccess (c@CompilationInfo{javaSource=jsrc,sourceInfo=Definitions,state=state}) ->
      return $ Left ["Not an expression!"]
    -- The script is a module
    CompilationSuccess (c@CompilationInfo{javaSource=jsrc,sourceInfo=Module,state=state}) ->
       return $ Left ["Not an expression!"]
    -- The script is an expression 
    CompilationSuccess (c@CompilationInfo{javaSource=jsrc,
                             sourceInfo=Expression{variableName=var},
                             state=g}) -> 
        let symbol = unJust $ lookupVarSymbol g.thisTab var in
        return . Right $ getSymbolType symbol g
    CompilationFailure err -> return $ Left err
      
{--
 * [returns] the show script for the passed symbol. If the symbol is of type IO,
 *           it is "executed" and then @show@ is applied.
 * [requires] the script must represent an expression
-}    
buildShowScript varName state symbol = 
  if isIO state symbol then "show $ IO.performUnsafe " ++ varName
  else "show $ " ++ varName
  
native fieldValue frege.memoryjavac.JavaUtils.fieldValue :: 
  String -> String -> ClassLoader -> IO (Either ScriptException a)
  
native spawnFetchFieldValue frege.memoryjavac.JavaUtils.spawnFetchFieldValue :: 
  String -> String -> JMap String ByteArr -> IO (Either ScriptException a)
  
native invokeMain frege.memoryjavac.JavaUtils.invokeMain :: String -> ClassLoader -> IO () throws
   ScriptException

pure native toLowerCase :: String -> String
pure native trim :: String -> String
    
data StateT s m a = StateT { runStateT :: (s -> m (a,s)) }
 
instance Monad (Monad m) => StateT s m where
  return a         = StateT (\s -> return (a,s))
  (StateT x) >>= f = StateT t where
    t s = do
      (v,s') <- x s          -- get new value and state
      StateT.runStateT (f v) s'     -- pass them to f
       
       
instance MonadPlus (MonadPlus m) => (StateT s m) where
    mzero = StateT (\s -> mzero)
    (StateT x1) `mplus` (StateT x2) = StateT (\s -> (x1 s) `mplus` (x2 s))
                                                        
 
evalStateT m s = liftM fst (StateT.runStateT m s)
 
state :: Monad m
      => (s -> (a, s))  -- ^pure state transformer
      -> StateT s m a   -- ^equivalent state-passing computation
state f = StateT (return . f)
 
class MonadTrans t where
  -- | Lift a computation from the argument monad to the constructed monad.
  lift :: Monad m => m a -> t m a
   
instance MonadTrans (StateT s) where
    lift c = StateT (\s -> c >>= (\x -> return (x,s)))
    
class MonadIO (Monad m) => m where
    -- | Lift a computation from the 'IO' monad.
    liftIO :: IO a -> m a

data Interpreter a = Interpreter { 
  unInterpreter :: StateT InterpreterState IO a } where
  --MonadState functions
  get = Interpreter (StateT (\s -> return (s,s)))
  put s = Interpreter (StateT (\_ -> return ((), s)))
  modify f = do
      s <- Interpreter.get
      Interpreter.put (f s)
 
instance Monad Interpreter where
  return a = Interpreter $ return a
  (Interpreter x) >>= f = Interpreter $ x >>= (\y -> Interpreter.unInterpreter $ f y)
                         
instance MonadIO Interpreter where
    liftIO = Interpreter . lift
    
--runInterpreter :: Interpreter a -> InterpreterState -> IO (EvalResult a)
runInterpreter interpreter state = 
  evalStateT (Interpreter.unInterpreter interpreter) state
  