{--
 * Frege compiler to compile scripts in memory
-}
module frege.interpreter.FregeScriptCompiler where

import frege.compiler.Scanner hiding (main, version, is)
import frege.compiler.Main(stdOptions, format, 
  make, lexPass, parsePass, postTrue, getOperators)
import frege.compiler.GUtil
import frege.compiler.BaseTypes(Pos)
import frege.lib.PP
import Data.List
import Data.Maybe
import frege.List as FL (Tree)
import Java.IO()
--import frege.IO(`<<`, stdout, stderr, File, OutputStreamWriter, PrintWriter, 
  --Closeable, Appendable, ClassLoader, StringWriter)
import frege.compiler.Nice (text, msgdoc)
import frege.compiler.Classtools  as CT(FregePackage)
import frege.compiler.Data
import frege.compiler.Utilities   as U()
import frege.compiler.Scanner     as Lex()
import frege.compiler.Grammar     as Parse()
import frege.compiler.Fixdefs     as P1()
import frege.compiler.Import      as P2()
import frege.compiler.Enter       as P3()
import frege.compiler.TAlias      as P4()
import frege.compiler.Transdef    as P5()
import frege.compiler.Classes     as P6()
import frege.compiler.Transform   as P7()
import frege.compiler.Typecheck   as TC()
import frege.compiler.GenMeta     as GM()
import frege.compiler.gen.Util    as GU()
import frege.compiler.GenJava7    as G7()
import frege.compiler.EclipseUtil as EU()
import frege.java.Net

--- utility function to create 'Options' data structure
createopts sp flags dir path prefix = stdOptions.{
                                sourcePath = sp,
                                flags, dir,
                                path = path,
                                prefix}
                                
standardOptions exld = do
    cache    <- Ref.new Nil      -- start out with empty cache
    let loader = exld
    return Global {
            options = stdOptions,
            sub = Sub {
                cache, loader,
                optab = Nil,
                toks = Array.fromList [],
                idKind = Nil,
                definitions = [],
                packageDoc = Nothing,
                thisPos  = Position.null,
                nsPos = Nil,
                thisPack = Pack.new "",
                errors  = 0,
                messages = [],
                cancelled = return false,
                nextPass = 1,
                stderr = IO.stderr,
                toExport = []
            },
            gen = Gen {
                printer = IO.stdout,
                tunique = 0,
                runique = 0,
                sunique = 0,
                xunique = 1,
                kunique = 1,
                tTree = Nil,
                rTree = Nil,
                sTree = Nil,
                xTree = Nil .insert GU.defEA 0,        -- so that 0 never indexes valid expression
                kTree = Nil .insert (KindA {kind=0, suba=0, subb=0}) 0, -- kind0 = *
                consts = Nil,
                lambdas = Nil,
                syminfo = Nil,
                jimport = Nil,
            },
            unique = 1,
            packages = Nil,
            namespaces = Nil,
            genEnv = [],
            javaEnv = Nil,
            locals = Nil,
            typEnv = []
        }
        
--- utility function to run the compiler, callable from Java
runfregec !src !predefs !opts !pw loader steps moduleName = do
        global <- standardOptions loader
        let g0 = global.{options = opts}.{sub <- SubSt.{stderr=pw}}
        return $ StG.run (run predefs loader steps moduleName) g0.{options <- Options.{source=src}}

data SourceInfo = Module | Definitions | Expression {variableName :: String}

derive Show SourceInfo

{-returns true if the script is a list of definitions, false if the script
  is an expression or a module-}        
findScriptType :: String -> StG SourceInfo   
findScriptType predefs = do
  g <- getST
  runpass (lexPass,         "lexical analysis                      ", postTrue)
  g <- getST
  if g.errors == 0 then scriptTypePass predefs else return SourceInfo.Module
  
scriptTypePass predefs = do
  g <- getST
  let tokens = (filter noComment g.sub.toks.toList)
  case tokens of
    [] -> return SourceInfo.Module 
    (Token{tokid=PACKAGE}) : _ -> return SourceInfo.Module 
    _ -> do
      isExpr <- isExpressionPass predefs
      return (if isExpr 
        then SourceInfo.Expression $ findUnusedVariableName predefs
        else SourceInfo.Definitions)
        
noComment Token{tokid} = tokid != COMMENT && tokid != DOCUMENTATION
        
--- utility function to run the compiler, combines 'createopts' and 'runfregec'
runcompiler src predefs sp flags dir path prefix pw loader steps moduleName = 
  runfregec src predefs opts pw loader steps moduleName
    where opts = createopts sp flags dir path prefix
    
runpass (pass,description,post) = do
    state <- getST
    when (state.errors == 0) do
        (itemnm, items) <- pass
        state <- getST
        postconditionHolds <- if state.errors == 0 then post else stio true
        unless (postconditionHolds) do
            doio (state.stderr.println "FATAL: post condition violated")
            changeST Global.{sub <- SubSt.{errors <- (1+)}}
        stio ()
          
{--
 * 'run' all passes, one after another
 * until one of them returns an error
 -}
run predefs loader steps moduleName = do
    g <- getST
    scriptType <- findScriptType predefs
    let source = buildScript g.options.source scriptType predefs moduleName
    changeST $ const g
    changeST Global.{options <- Options.{source=source}}
    changeST Global.{gen <- GenSt.{printer=IO.stdout}}    -- just to have no undefined value there
    changeST Global.{sub <- SubSt.{loader}}
    foreach steps runpass
    g <- getST
    return scriptType

newLine = maybe "\n" id $ System.getProperty "line.separator" 

moduleDeclScript moduleName = "module " ++ moduleName ++ " where"
variableDeclScript varName script = varName ++ " = " ++ script

buildScript script SourceInfo.Definitions predefs moduleName = 
  intercalate newLine [moduleDeclScript moduleName, predefs, script]
buildScript script SourceInfo.Expression{variableName=varName} predefs moduleName = 
  intercalate newLine [moduleDeclScript moduleName, predefs, variableDeclScript varName script]
buildScript script SourceInfo.Module predefs _ = script

findUnusedVariableName script = "res" ++ show unusedVarNum where
  unusedVarNum = unJust $ find (not . flip elem used) [1..]
  used = reverse $ loop m []
  m = #res(\d+)#.matcher script
  loop :: Matcher -> [Int] -> [Int]
  loop m1 acc | Just m2 <- m1.find = loop m2 ((atoi . unJust $ m2.group 1) : acc)
              | otherwise = acc
     
openPrinter pw = do
    g <- getST
    printer <- doio $ StringWriter.printer pw
    changeST Global.{gen <- GenSt.{printer=printer}}
    stio ("file", 1)

{--
    Description of the compiler passes.

    This list is also used by the IDE to determine the compiler passes to run.

    *Note*: It is important that the typecheck pass has a description that starts with "type check".
    This way the IDE recognizes the last pass if it is not a build.
-}
passes jw packageName = [
    -- function       description                            post condition
    (lexPass,         "lexical analysis                      ", postTrue),
    (iparsePass,      "syntax  analysis                      ", 
       postTrue),
    (P1.pass,         "collecting definitions                ", P1.post),
    (P2.pass,         "symbol table initialization and import", P2.post),
    (P6.passI true,   "verify imported instances             ", P6.post),
    (P3.pass,         "enter definitions                     ", P3.post),
    (P4.pass,         "check type aliases                    ", P4.post),
    (P3.pass2,        "make field definitions                ", P3.post),
    (P3.pass3,        "enter (derived) instances             ", P3.post),
    (P5.pass,         "translate names in exprs and types    ", P5.post),
    (P6.passC,        "verify class definitions              ", P6.post),   -- TRACE6
    (P6.passI false,  "verify own instances                  ", P6.post),   -- TRACE6
    (P7.pass7,        "simplify lets                         ", P7.post),   -- TRACE7
    (TC.pass,         "type check                            ", TC.post),   -- TRACET, TRACEO
    (P7.pass9,        "simplify expressions                  ", P7.post),   -- TRACE9
    (P7.pass8,        "globalize anonymous lambdas           ", P7.post),   -- TRACE8
    (P7.pass10,       "strictness analysis                   ", P7.post),   -- TRACES
    (openPrinter jw,     "open file                             ", postTrue),
    (GM.pass,         "generate meta data                    ", GM.post),   -- none
    (G7.pass,         "generate java code                    ", G7.post),  -- TRACEG
    (javacPass jw,           "run java compiler                     ", postTrue)
    ]
    
data ScriptException = pure native javax.script.ScriptException
derive Exceptional ScriptException

data MemoryClassLoader = mutable native frege.memoryjavac.MemoryClassLoader where
	native new :: ClassLoader -> JMap String ByteArr -> IO MemoryClassLoader
	native getClasses :: MemoryClassLoader -> IO (JMap String ByteArr)

native asMemoryClassLoader "(frege.memoryjavac.MemoryClassLoader)" :: URLClassLoader -> IO MemoryClassLoader

data ByteArr = mutable native "byte[]"

native javac frege.memoryjavac.JavaUtils.compile :: String -> String -> MemoryClassLoader -> 
	IO (Either ScriptException MemoryClassLoader) 

data JMap k v = mutable native java.util.Map where
  native put :: JMap k v -> k -> v -> IO ()
  native get :: JMap k v -> k -> IO (Maybe v)
  native putAll :: JMap k v -> JMap k v -> IO ()
  
data HashMap k v = mutable native java.util.HashMap where
  native new :: () -> IO (HashMap k v)
  
  
javacPass :: StringWriter -> StG (String, Int)
javacPass src = do
  g <- getST
  let !packName = g.sub.thisPack.unpack g
      !loader = g.sub.loader
  !jsrc <- doio $ src.toString
  memloader <- doio $ asMemoryClassLoader loader
  res <- doio $ javac jsrc packName memloader
  case res of
    Left err -> do
            U.error Position.null (TEXT err.getMessage)
            return ("javac", 1)
    Right loader -> do
      changeST Global.{sub <- SubSt.{loader=loader}} --Classloader with compiled class
      return ("javac", 0)
  
    
compile :: String -> [String] -> [String] -> PrintWriter -> 
  StringWriter -> MemoryClassLoader -> String -> String  -> IO (SourceInfo, Global)
compile src paths libpaths !ow !jw !loader !predefs !moduleName = do
  let flags = Flags.fromList [WITHCP, IDE]
  let steps = passes jw moduleName
  runcompiler src predefs paths flags "." libpaths "" ow loader steps moduleName
  
isDefined :: [DefinitionT] -> Definition -> Bool
isDefined defs (_@TypDcl{name=x}) = isJust . find (matching x) $ defs
isDefined defs (_@ClaDcl{name=x, defs=ds}) = isJust . find (matching x) $ defs
{-isDefined defs (_@InsDcl{clas=clas1, typ=typ1}) = isJust . find matching $ defs where
  matching (_@InsDcl{clas=clas2, typ=typ2}) = show clas1 == show clas2 
  matching _ = false
isDefined defs (_@DrvDcl{clas=clas1, typ=typ1}) = isJust . find matching $ defs where
  matching (_@DrvDcl{clas=clas2, typ=typ2}) = show clas1 == show clas2
  matching _ = false-}
isDefined defs (_@AnnDcl{name=x}) = isJust . find (matching x) $ defs
isDefined defs (_@NatDcl{name=name1}) = isJust . find (matching name1) $ defs
isDefined defs (_@FunDcl{name=x,pats=pats}) = null pats && (isJust . find (matching x) $ defs)
isDefined defs (_@DatDcl{name=x,defs=ds}) = isJust . find (matching x) $ defs
isDefined defs (_@JavDcl{name=x}) = isJust . find (matching x) $ defs
isDefined _ _ = false

matching x (_@TypDcl{name=y}) = x == y 
matching x (_@ClaDcl{name=y}) = x == y 
matching x (_@AnnDcl{name=y}) = x == y
matching x (_@NatDcl{name=name2}) = name2 == x
matching x (_@FunDcl{name=y,pats=pats}) = null pats && x == y
matching x (_@DatDcl{name=y}) = x == y
matching x (_@JavDcl{name=y}) = x == y 
matching _ _ = false

groupFunDcl ds = groupBy f ds where
  f (fun1@FunDcl{name=name1}) (fun2@FunDcl{name=name2}) = name1 == name2
  f _ _ = false
  
isFunDefined decls ((_@FunDcl{name=x}):_) = isJust . find (pred x) $ map head decls where
  pred x (_@FunDcl{name=y}) = x == y
  pred x _ = false
isFunDefined _ _ = false

exprType :: Global -> String -> String    
exprType g compilationId = let symbols = EU.symbols g.thisTab in 
  case (find (existsVarSymbol compilationId) symbols) of
    Just s -> EU.label g s
    Nothing -> ""
    
lookupVarSymbol :: Symtab -> String -> Maybe Symbol    
lookupVarSymbol symtab name = let symbols = (EU.symbols symtab) in 
  find (existsVarSymbol name) symbols

getSymbolType :: Symbol -> Global -> String
getSymbolType SymI{typ} !g = EU.verbose g typ
getSymbolType SymV{typ} !g = EU.verbose g typ
getSymbolType SymD{typ} !g = EU.verbose g typ
getSymbolType _ _ = ""

showSymbols :: Global -> [String]
showSymbols g  = map (EU.label g) $ EU.symbols g.thisTab
  
existsVarSymbol name (s@(SymV {name=x})) = (QName.base x) == name
existsVarSymbol _ _ = false

iparsePass = do
    g       <- getST
    let tokens = (filter noComment g.sub.toks.toList)
    result <- Parse.pass tokens
    case result of
        Just (Program.Module (packname, defs, doc)) -> do
            changeST Global.{sub <-  SubSt.{thisPack = Pack.new packname}}
            let ds = nubFront defs isDefined
                gds = groupFunDcl ds
                uniqds = concat $ nubFront gds isFunDefined
            changeST Global.{sub <- (SubSt.{definitions = uniqds}
                                     • SubSt.{packageDoc = Nothing})}
            stio ("tokens",  g.sub.toks.length)
        Just _ -> error "FATAL: Expected module"
        Nothing -> stio ("tokens", g.sub.toks.length)
        

isExpressionPass :: String -> StG Bool
isExpressionPass predefs = do
    g       <- getST
    sw <- doio $ StringWriter.new ()
    pw <- doio $ sw.printer
    let decl src = variableDeclScript "f" src --A declaration with some name
    let changeSource src = intercalate newLine ["module T where", predefs, decl src]
    changeST Global.{sub <- SubSt.{stderr=pw}, 
      options <- Options.{source <- changeSource}}
    runpass (lexPass,         "lexical analysis                      ", postTrue)
    g <- getST
    if g.errors != 0 then
      return false
    else do
      let tokens = (filter noComment g.sub.toks.toList)
      result <- Parse.pass tokens
      g <- getST
      return $ g.errors == 0

lexPass = do
    changeST Global.{sub <- SubSt.{toks = Array.fromList []}
                            • SubSt.{definitions = []}
                            • SubSt.{packageDoc  = Nothing}
                            • SubSt.{thisPack    = Pack.new ""}}
    changeST Global.{locals = Nil, typEnv = []}
    g <- getST
    let opts = g.options
    tokens <- Lex.passCS (CharSeq.fromString opts.source) getOperators
    stio ("tokens", length tokens)
 

nubFront [] _ = []
nubFront (x:xs) f = if (f xs x) then nubFront xs f else x : nubFront xs f

data Object = mutable native "java.lang.Object" where
	native toString :: Object -> IO String

native asObject "(Object)" :: a -> IO Object
  
isVariable :: Global -> Symbol -> Bool
isVariable !g SymV{name,typ} = case typ.rho of
  RhoFun _ _ _ = false
  RhoTau ctx _ = ctx == [] 
isVariable _ _ = false

isIO :: Global -> Symbol -> Bool
isIO !g SymV{typ} = case (U.unAlias g $ RhoT.tau typ.rho) of
  TApp (TCon {name}) _ = name.nicer g == "IO"
  _ = false
isIO _ _ = false 

isString !g SymV{typ} = case (U.unAlias g $ RhoT.tau typ.rho) of
  TCon {name} = name.nicer g == "String"
  _ = false
isString _ _ = false
