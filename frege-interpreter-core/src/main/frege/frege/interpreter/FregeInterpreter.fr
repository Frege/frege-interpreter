{--
  Frege Interpreter
-}
module frege.interpreter.FregeInterpreter where

import frege.Prelude hiding (Reader)
import Compiler.Scanner hiding (main, is, interpret)
import Compiler.Main(stdOptions, format,
  make, parsePass, postTrue, getOperators)
import Compiler.GUtil as GUtil()

import Compiler.enums.Flags
import Compiler.enums.TokenID(TokenID)

import Lib.PP(TEXT)

import Data.List
import Java.IO()
import Data.TreeMap (Tree, values)
import Compiler.Data hiding (Message, Severity)
import Compiler.Data (Severity(), Message CompilerMessage)
import Compiler.types.NSNames
import Compiler.types.SNames
import Compiler.Utilities   as U()
import Compiler.Scanner     as Lex()
import Compiler.Grammar     as Parse()
import Compiler.Fixdefs     as P1()
import Compiler.Import      as P2()
import Compiler.Enter       as P3()
import Compiler.TAlias      as P4()
import Compiler.Transdef    as P5()
import Compiler.Classes     as P6()
import Compiler.Transform   as P7()
import Compiler.Typecheck   as TC()

import Compiler.types.Positions
import Compiler.types.Tokens
import Compiler.types.Packs
import Compiler.types.QNames
import Compiler.types.Types
import Compiler.types.External(KindA, defEA)

import Compiler.GenMeta     as GM()
import Compiler.GenJava7    as G7()
import Ide.Utilities        as EU()
import Compiler.Import(getFP, importClass)
import Control.monad.Reader
import Control.monad.State (evalState, execState)
import Control.arrow.Kleisli

data Interpreter config st a = Interpreter {
    unInterpreter :: ReaderT (State st) config a
  } where

  get = Interpreter (Kleisli (\_ -> State.get))
  put s = Interpreter (Kleisli (\_ -> State.put s))
  ask = Interpreter Reader.ask
  modify f = do
      s <- Interpreter.get
      Interpreter.put (f s)

  run (Interpreter interpreter) = State.run . Kleisli.run interpreter
  eval (Interpreter interpreter) = State.evalState . Kleisli.run interpreter
  exec (Interpreter interpreter) = State.execState . Kleisli.run interpreter

instance Monad (Interpreter config st) where
  return = Interpreter . return
  (Interpreter r) >>= f = Interpreter $ r >>= g where
     g = Interpreter.unInterpreter . f

data InterpreterConfig = InterpreterConfig {
    predefs :: [String],
    transformDefs :: [Definition] -> StG [Definition]
  } where

  default = InterpreterConfig {
    predefs = [],
    transformDefs = removeDuplicateDefs
  }

data InterpreterState = InterpreterState {
  classLoader :: InterpreterClassLoader
}

type InterpreterApp = Interpreter InterpreterConfig InterpreterState


--- utility function to create 'Options' data structure
createopts sp flags dir path prefix source = stdOptions.{
                                source = source,
                                sourcePath = sp,
                                flags, dir,
                                path = path,
                                prefix}

standardOptions classLoader = do
    cache <- Ref.new Tree.empty -- start out with empty cache
    err <- StringWriter.new () >>= StringWriter.printer
    out <- StringWriter.new () >>= StringWriter.printer
    return Global {
            options = stdOptions,
            sub = Sub {
                cache,
                loader = classLoader,
                optab = Tree.empty,
                toks = arrayFromList [],
                idKind = Tree.empty,
                definitions = [],
                packageDoc = Nothing,
                thisPos  = Position.null,
                nsPos = Tree.empty,
                packWhy = Tree.empty,
                nsUsed = Tree.empty,
                thisPack = Pack.new "",
                numErrors  = 0,
                resErrors = 0,
                messages = [],
                cancelled = return false,
                nextPass = 1,
                stderr = err,
                toExport = [],
            },
            gen = Gen {
                printer = out,
                tunique = 0,
                runique = 0,
                sunique = 0,
                xunique = 1,
                kunique = 1,
                tTree = Tree.empty,
                rTree = Tree.empty,
                sTree = Tree.empty,
                xTree = Tree.empty .insert defEA 0,        -- so that 0 never indexes valid expression
                kTree = Tree.empty .insert (KindA {kind=0, suba=0, subb=0}) 0, -- kind0 = *
                consts = Tree.empty,
                lambdas = Tree.empty,
                syminfo = Tree.empty,
                jimport = Tree.empty,
            },
            unique = 1,
            packages = Tree.empty,
            namespaces = Tree.empty,
            genEnv = [],
            javaEnv = Tree.empty,
            locals = Tree.empty,
            typEnv = [],
            tySubst = Tree.empty
        }

data InterpreterResult = Success
                         { sourceRepr :: SourceInfo,
                           compilerState :: Global
                         }
                       | Failure [Message]

javaSourceGen :: Global -> InterpreterApp (Maybe String, Global)
javaSourceGen global = do
  state <- Interpreter.get
  let javagenST = do
                    javaSourceWriter <- doio $ StringWriter.new () -- Java source will be written here
                    let steps = javaSourcePasses javaSourceWriter
                    foreach steps runpass
                    global <- getST
                    if global.errors == 0
                        then do
                           javaSource <- doio $ javaSourceWriter.toString
                           return (Just javaSource)
                        else return Nothing
  return $ StG.run javagenST global

javagen :: Global -> InterpreterApp (Maybe String, Global)
javagen global = do
  state <- Interpreter.get
  let javagenST = do
                    javaSourceWriter <- doio $ StringWriter.new () -- Java source will be written here
                    classLoader <- doio $ Mutable.thaw state.classLoader
                    javac <- doio $ MemoryJavaCompiler.new classLoader
                    let steps = javagenPasses javaSourceWriter javac
                    foreach steps runpass
                    global <- getST
                    if global.errors == 0
                        then do
                           classLoader <- doio $ javac.classLoader >>= Mutable.freeze
                           javaSource <- doio $ javaSourceWriter.toString
                           return (classLoader, Just javaSource)
                        else return (state.classLoader, Nothing)
  let ((loader, jsrc), g) = StG.run javagenST global
  Interpreter.put $ InterpreterState loader
  return (jsrc, g)

typecheck :: String -> InterpreterApp (Global, Maybe SourceInfo)
typecheck src = do
  config <- Interpreter.ask
  state <- Interpreter.get
  let predefsSrc = intercalate newLine $ reverse config.predefs
      (sourceType, global) = StG.run (run src predefsSrc (typecheckPasses config)) (interpreterCompilerEnv state.classLoader)
  return (global, sourceType)

interpret :: String ->  InterpreterApp InterpreterResult
interpret line = do
  (tcGlobal, srcInfo) <- typecheck line
  case srcInfo of
    Just sourceInfo -> do
      (jsrc, g) <- javagen tcGlobal
      let fail = InterpreterResult.Failure (Message.fromGlobal g)
          success = InterpreterResult.Success sourceInfo g
      return $ maybe fail (const success) jsrc
    Nothing -> return (InterpreterResult.Failure $ Message.fromGlobal tcGlobal)

browseModule :: String -> InterpreterApp (Maybe ([Symbol], Global))
browseModule moduleName = do
  state <- Interpreter.get
  (g, srcInfo) <- typecheck "\"\""
  let syms = StG.run (browseSymbols moduleName) g
  return $ maybe Nothing (const $ Just syms) srcInfo


browse :: String -> InterpreterApp (Maybe ([Symbol], Global))
browse src = do
  res <- interpret src
  case res of
    InterpreterResult.Success {sourceRepr=Definitions syms, compilerState=g} -> return $ Just (syms, g)
    _ -> return Nothing

typeof :: String -> InterpreterApp ([Message] | String)
typeof expr = do
  res <- typecheck expr
  case res of
   (g, Just (Expression s)) -> return . Right $ getSymbolType g s
   (_, Just _)              -> return . Left $ [Message.info "Not an expression!"]
   (g, _)            -> return . Left $ map (Message.fromCompilerMessage) g.sub.messages


javaSource :: String -> InterpreterApp ([Message] | String)
javaSource line = do
  (g, srcInfo) <- typecheck line
  let f = do
            (jsrcMaybe, javagenGlobal) <- javaSourceGen g
            return $ maybe (Left $ Message.fromGlobal javagenGlobal) Right jsrcMaybe
  maybe (return . Left $ Message.fromGlobal g) (const f) srcInfo

docHelp :: String -> InterpreterApp ([Message] | String)
docHelp source = do
   let help g = Right . unlines $ helpDoc source g
   (g, srcInfo) <- typecheck "\"\""
   return $ maybe (Left $ Message.fromGlobal g) (const $ help g) srcInfo

removeDuplicateDefs :: [Definition] -> StG [Definition]
removeDuplicateDefs defs = do
  let ds = nubBy matching $ reverse defs
      fm (x:xs) (y:ys) = funcMatching x y
      fm _ _ = false
      uniqds = reverse . concat $ nubBy fm $ groupBy funcMatching ds
  return uniqds

data MessageType = INFO | ERROR | WARNING | HINT where
  translateCompilerMsgType Severity.HINT = HINT
  translateCompilerMsgType Severity.WARNING = WARNING
  translateCompilerMsgType Severity.ERROR = ERROR
derive Show MessageType

data Message = Message {pos :: Position, msgType :: MessageType, text :: String} where
  showMessages = intercalate newLine . map show
  fromCompilerMessage (CompilerMessage.Msg pos sev text) =
    Message pos (MessageType.translateCompilerMsgType sev) text

  info txt = Message Position.null INFO txt
  error txt = Message Position.null ERROR txt
  hint txt = Message Position.null HINT txt
  warning txt = Message Position.null WARNING txt
  fromGlobal (g :: Global) = reverse $ map fromCompilerMessage g.sub.messages

instance Show Message where
  show (Message pos INFO txt) = txt
  show (Message pos typ txt) = "[" ++ show typ ++ ": " ++ show pos ++ "]: " ++ txt

symbolVar :: Symbol -> Global -> String
symbolVar SymV{nativ} g | Just nativSig <- nativ = elemAt (split nativSig "\\.") 1
symbolVar SymL{alias, name} g = maybe (error $ "Not found: " ++ show name) (flip symbolVar g) $ g.find alias
symbolVar symbol g = symbol.name.base

symbolClass :: Symbol -> Global -> String
symbolClass SymV{nativ} g | Just nativSig <- nativ = elemAt (split nativSig "\\.") 0
symbolClass SymL{alias, name} g = maybe (error $ "Not found: " ++ show name) (flip symbolClass g) $ g.find alias
symbolClass symbol g = g.unpack symbol.name.getpack


{--
 * 'run' all passes, one after another
 * until one of them returns an error
 -}
run src predefs steps = do
    g <- getST
    let scriptType = findScriptType src
        varName = findUnusedVariableName (predefs ++ src)
        source = buildScript src scriptType predefs "Console" varName
    changeST $ const g
    changeST Global.{gen <- GenSt.{printer=IO.stdout}}    -- just to have no undefined value there
    foreach (steps source) runpass
    g <- getST
    if g.errors == 0
      then case scriptType of
                ModuleSource -> return . Just $ SourceInfo.Module $ className g
                DefinitionsSource -> return . Just $ SourceInfo.Definitions $ getSymbols g.thisTab
                ExpressionSource -> return $ SourceInfo.Expression <$> listToMaybe sym where
                  sym = fst $ StG.run (resolveSymbol varName) g
      else return Nothing

{-
Compiler state with interpreter options
There is no IO; The classes are loaded in memory.
-}
interpreterCompilerEnv loader = IO.performUnsafe $ do
  g <- standardOptions loader
  let opts = createopts ["."] flags "." [] "" "<console>.fr"
      flags = Flags.fromList [WARNINGS, HINTS, IDE]
  return g.{options = opts}

stdCompilerEnv loader = IO.performUnsafe $ standardOptions loader

runpass (pass,description,post) = do
    state <- getST
    when (state.errors == 0) do
        (itemnm, items) <- pass
        state <- getST
        postconditionHolds <- if state.errors == 0 then post else stio true
        unless (postconditionHolds) do
            doio (state.stderr.println "FATAL: post condition violated")
            changeST Global.{sub <- SubSt.{numErrors <- (1+)}}
        stio ()

derive Show Severity

browseSymbols :: String -> StG [Symbol]
browseSymbols s = do
        let p = Pack.new $ magicPack s
        importClass Position.null p.nsName p
        g <- getST
        let resolveSName = do
                            qNames <- sNameToQName (createSName s)
                            let qNameSyms q = maybe [] getSymbols $ getEnv g q
                            return $ qNames >>= qNameSyms
            resolvePackage d p = maybe d (return . getSymbols) $ g.packages.lookup p
            resolveNSPackage d = maybe d (resolvePackage d) $ g.namespaces.lookup (NSX s)
        resolvePackage (resolveNSPackage resolveSName) p

getEnv :: Global -> QName -> Maybe Symtab
getEnv g q = g.find q >>= symEnv
  where
    symEnv s
      | s.{env?} = Just s.env
      | otherwise = Nothing

outlineSymbols :: Global -> [String]
outlineSymbols g = map (EU.label g) $ EU.symbols g.thisTab

newLine = maybe "\n" id $ System.getProperty "line.separator"

className :: Global -> String
className global = global.unpack global.sub.thisPack

data SourceType = ModuleSource | DefinitionsSource | ExpressionSource
derive Show SourceType

data SourceInfo = Module String
                | Expression Symbol
                | Definitions [Symbol]

instance Show SourceInfo where
  show (Module packName) = "Module " ++ packName
  show (Expression _) = "Expression"
  show (Definitions _) = "Definitions"

findScriptType :: String -> SourceType
findScriptType src = fst $ StG.run f (interpreterCompilerEnv InterpreterClassLoader.default) where
  f = do
    runpass (lexPass src,         "lexical analysis                      ", postTrue)
    g <- getST
    if g.errors == 0
      then scriptTypePass src
      else return SourceType.ModuleSource

scriptTypePass src = do
  g <- getST
  let tokens = filter noDocComment g.sub.toks.toList
  case tokens of
    [] -> return SourceType.ModuleSource
    (Token{tokid=PACKAGE}) : _ -> return SourceType.ModuleSource
    _ -> do
      isDef <- isDefinition src
      if isDef
        then return SourceType.DefinitionsSource
        else return SourceType.ExpressionSource

noDocComment Token{tokid} = tokid != COMMENT && tokid != DOCUMENTATION

moduleDeclScript moduleName = "module " ++ moduleName ++ " where"
variableDeclScript varName script = varName ++ " = \n" ++ (indent 2 script)

buildScript script SourceType.DefinitionsSource predefs moduleName varName =
  intercalate newLine [moduleDeclScript moduleName, predefs, script]
buildScript script SourceType.ExpressionSource predefs moduleName varName =
  intercalate newLine [moduleDeclScript moduleName, predefs, variableDeclScript varName script]
buildScript script SourceType.ModuleSource predefs _ _ = script

findUnusedVariableName script = "res" ++ show unusedVarNum where
  unusedVarNum = maybe 1 id . listToMaybe $ dropWhile (flip elem used) [1..]
  used = reverse $ loop m []
  m = #res(\d+)#.matcher script
  loop :: Matcher -> [Int] -> [Int]
  loop m1 acc | Just m2 <- m1.find = loop m2 ((maybe 1 atoi $ m2.group 1) : acc)
              | otherwise = acc

symDoc sym global = fst $ State.run (EU.symbolDocumentation sym) global
packageDoc pack global = fst $ StG.run (EU.packDocumentation (magicPack pack)) global

helpDoc src global = fst $ StG.run (helpDocST src) global

sNameToQName sName = do
  g <- getST
  qNames <- U.resolve (VName g.thisPack) Position.null sName
  return qNames

helpDocST source = do
  global <- getST
  let sName = createSName source
  qNames <- sNameToQName sName
  let syms = catMaybes $ global.find <$> qNames
      symdocs = (\sym -> symDoc sym global) <$> syms
      packdoc = packageDoc source global
      doc = if (any (not . null) symdocs) then symdocs else [packdoc]
  return doc

resolveSymbol :: String -> StG [Symbol]
resolveSymbol source = do
                         global <- getST
                         qNames <- sNameToQName (createSName source)
                         return . catMaybes $ global.find <$> qNames
createSName s
  | Just (Just ns : Just ty : Just id : _) <- s `match` #^(.*)\.(.*)\.(\p{Lu}.*)$# = with2con ns ty id
  | Just (Just ns : Just ty : Just id : _) <- s `match` #^(.*)\.(.*)\.(.*)$#       = with2var ns ty id
  | Just (Just ty : Just id : _)           <- s `match` #^(.*)\.(\p{Lu}.*)$#       = with1con ty id
  | Just (Just ty : Just id : _)           <- s `match` #^(.*)\.(.*)$#             = with1var ty id
  | s ~ #^\p{Lu}.*$#                                                               = Simple (Token CONID s 1 0 0 [])
  | otherwise                                                                      = Simple (Token VARID s 1 0 0 [])
     where with2con ns ty id = With2 (qual ns) (qual ty) (con id)
           with2var ns ty id = With2 (qual ns) (qual ty) (var id)
           with1con ty id = With1 (qual ty) (con id)
           with1var ty id = With1 (qual ty) (var id)
           qual name = Token QUALIFIER name 1 0 0 []
           con name = Token CONID name 1 0 0 []
           var name = Token VARID name 1 0 0 []

match s regex = groups <$> s =~ regex where groups m = [m.group i | i <- [1..groupCount m]]

buildShowScript varName state symbol
  | isIO state symbol = "packed . take 80 . showChars $ IO.performUnsafe " ++ varName
  | otherwise         = "packed . take 80 . showChars $ " ++ varName

openPrinter pw = do
    g <- getST
    printer <- doio $ StringWriter.printer pw
    changeST Global.{gen <- GenSt.{printer=printer}}
    stio ("file", 1)

javaSourcePasses jw = [
    -- function       description                            post condition
    (P7.pass9,        "simplify expressions                  ", P7.post),   -- TRACE9
    (P7.pass8,        "globalize anonymous lambdas           ", P7.post),   -- TRACE8
    (P7.pass10,       "strictness analysis                   ", P7.post),   -- TRACES
    (openPrinter jw,     "open file                             ", postTrue),
    (GM.pass,         "generate meta data                    ", GM.post),   -- none
    (G7.pass,         "generate java code                    ", G7.post)  -- TRACEG
    ]

javagenPasses jw javac = javaSourcePasses jw ++ [
    -- function       description                            post condition
    (javacPass javac jw,           "run java compiler                     ", postTrue)
    ]

typecheckPasses (config :: InterpreterConfig) src = [
  -- function       description                            post condition
  (lexPass src,         "lexical analysis                      ", postTrue),
  (iparsePass config.transformDefs,      "syntax  analysis                      ", postTrue),
  (P1.pass,         "collecting definitions                ", P1.post),
  (P2.pass,         "symbol table initialization and import", P2.post),
  (P6.passI true,   "verify imported instances             ", P6.post),
  (P3.pass,         "enter definitions                     ", P3.post),
  (P4.pass,         "check type aliases                    ", P4.post),
  (P3.pass2,        "make field definitions                ", P3.post),
  (P3.pass3,        "enter (derived) instances             ", P3.post),
  (P5.pass,         "translate names in exprs and types    ", P5.post),
  (P6.passC,        "verify class definitions              ", P6.post),   -- TRACE6
  (P6.passI false,  "verify own instances                  ", P6.post),   -- TRACE6
  (P7.pass7,        "simplify lets                         ", P7.post),   -- TRACE7
  (TC.pass,         "type check                            ", TC.post)   -- TRACET, TRACEO
  ]

javacPass :: MutableIO MemoryJavaCompiler -> StringWriter -> StG (String, Int)
javacPass compiler src = do
  g <- getST
  let !packName = g.unpack g.sub.thisPack
  !jsrc <- doio $ src.toString
  res <- doio $ compiler.compile jsrc packName
  isSuccess <- doio $ res.isSuccess
  if !isSuccess
    then do
            msg <- doio $ res.errorsAsString
            U.error Position.null (TEXT msg)
            return ("javac", 1)
    else
      return ("javac", 0)

matching (_@TypDcl{name=x}) (_@TypDcl{name=y}) = x == y
matching (_@ClaDcl{name=x}) (_@ClaDcl{name=y}) = x == y
matching (_@AnnDcl{name=x}) (_@AnnDcl{name=y}) = x == y
matching (_@NatDcl{name=x}) (_@NatDcl{name=y}) = x == y
matching (_@DatDcl{name=x}) (_@DatDcl{name=y}) = x == y
matching (_@JavDcl{name=x}) (_@JavDcl{name=y}) = x == y
matching _ _ = false

funcMatching (_@FunDcl{name=x}) (_@FunDcl{name=y}) = x == y
funcMatching _ _ = false

getSymbolType :: Global -> Symbol -> String
getSymbolType g SymI{typ} = EU.verbose g typ
getSymbolType g SymV{typ} = EU.verbose g typ
getSymbolType g SymD{typ} = EU.verbose g typ
getSymbolType g SymL{alias} = maybe "" (getSymbolType g) $ g.find alias
getSymbolType g SymC{name,tau} = show tau.kind
getSymbolType g SymT{name, nativ = Just n, pur, mutable}
    | pur       = "pure native " ++ n
    | mutable   = "mutable native " ++ n
    | otherwise = "native " ++ n            
getSymbolType g sym
    | sym.{kind?}      = show sym.kind
    | otherwise        = ""

showSymbol :: Global -> Symbol -> String
showSymbol g sym = sym.category g ++ " " ++ EU.label g sym

getSymbols :: Symtab -> [Symbol]
getSymbols tab = (sortBy positionAndName • filter wanted • values) tab
    where
        positionAndName a b = case Symbol.pos a <=> Symbol.pos b of
                                    Eq -> comparing (QName.base • Symbol.name) a b
                                    ne -> ne
        wanted :: Symbol -> Bool
        wanted sym
            | sym.{alias?}                       = true
            | Local{} <- sym.name                = false
            -- sym.vis == Private                 = false
            | sym.name.base ~ ´^(chg|upd|has|let|anon|lc)\$´ = false
            | otherwise                          = true


iparsePass f = do
    g       <- getST
    let tokens = filter Token.noComment g.sub.toks.toList
    result <- Parse.pass tokens
    case result of
        Just (GUtil.Program.Module (packname, defs, doc)) -> do
            changeST Global.{sub <-  SubSt.{thisPack = Pack.new packname}}
            newDefs <- f defs
            changeST Global.{sub <- (SubSt.{definitions = newDefs }
                                     • SubSt.{packageDoc = Nothing})}
            stio ("tokens",  g.sub.toks.length)
        Just _ -> error "FATAL: Expected module"
        Nothing -> stio ("tokens", g.sub.toks.length)

indent n src = (unlines . map (spaces ++) . lines $ src) where
  spaces = concat $ replicate n " "

isDefinition :: String -> StG Bool
isDefinition src = do
    g       <- getST
    sw <- doio $ StringWriter.new ()
    pw <- doio $ sw.printer
    let modDecl = intercalate newLine ["module T where", src]
    changeST Global.{sub <- SubSt.{stderr=pw}}
    runpass (lexPass modDecl, "lexical analysis                      ", postTrue)
    g <- getST
    if g.errors != 0
      then return false
      else do
        let tokens = filter noDocComment g.sub.toks.toList
        result <- Parse.pass tokens
        g <- getST
        return $ g.errors == 0

lexPass src = do
    changeST Global.{sub <- SubSt.{toks = arrayFromList []}
                            . SubSt.{definitions = []}
                            . SubSt.{packageDoc  = Nothing}
                            . SubSt.{thisPack    = Pack.new ""}}
    changeST Global.{locals = Tree.empty, typEnv = []}
    tokens <- Lex.passCS (CharSeq.fromString src) getOperators
    stio ("tokens", length tokens)

isVariable :: Global -> Symbol -> Bool
isVariable g SymV{name,typ} = case typ.rho of
  RhoFun _ _ _ = false
  RhoTau ctx _ = ctx == []
isVariable g SymD{} = true
isVariable g SymL{alias} = maybe false (isVariable g) $ g.find alias
isVariable _ _ = false

isIO :: Global -> Symbol -> Bool
isIO g SymV{typ} = "ST RealWorld" `isPrefix` nice typ g where
                      isPrefix = isPrefixOf `on` toList
isIO g SymL{alias} = maybe false (isIO g) $ g.find alias
isIO _ _ = false

isString g SymV{typ} = nice typ g == "StringJ Char"
isString g SymL{alias} = maybe false (isString g) $ g.find alias
isString g _ = false

-- Find the cause not more than 10 level deep
showThrowableCause t = showThrowableCause' 10 t

showThrowableCause' depth t | depth <= 0 = showNative t
showThrowableCause' depth t = maybe (showNative t) (showThrowableCause' (pred depth)) $ throwableCause t

-- Native Definitions

data MemoryJavaCompiler = native frege.interpreter.javasupport.MemoryJavaCompiler where
  native new :: Mutable s (JMap String ByteArray) -> STMutable s MemoryJavaCompiler
              | Mutable s InterpreterClassLoader -> STMutable s MemoryJavaCompiler
  native compile :: Mutable s MemoryJavaCompiler -> String -> String -> STMutable s JavaCompilationInfo
  native classLoader :: Mutable s MemoryJavaCompiler ->  STMutable s InterpreterClassLoader

data InterpreterClassLoader = native frege.interpreter.javasupport.InterpreterClassLoader where
  native new :: () -> STMutable s InterpreterClassLoader
              | ClassLoader -> IOMutable InterpreterClassLoader
              | Mutable s (JMap String ByteArray) -> STMutable s InterpreterClassLoader
  pure native classes :: InterpreterClassLoader -> JMap String ByteArray

  private defaultClassLoaderST = do
                    loader <- InterpreterClassLoader.new ()
                    Mutable.freeze loader

  default = defaultClassLoaderST.run


instance Cloneable InterpreterClassLoader

data JavaCompilationInfo = native frege.interpreter.javasupport.CompilationInfo where
  native isSuccess :: Mutable s JavaCompilationInfo -> ST s Bool
  native errorsAsString :: Mutable s JavaCompilationInfo -> ST s String
  native classLoader :: MutableIO JavaCompilationInfo -> IO ClassLoader
  native classes :: Mutable s JavaCompilationInfo -> STMutable s (JMap String ByteArray)


data Byte = pure native byte
instance PrimitiveArrayElement Byte where
    native javaClass "byte.class" :: Class Byte

type ByteArray = JArray Byte

data JMap k v = native java.util.Map where
  native put :: Mutable s (JMap k v) -> k -> v -> ST s ()
  native get ::  Mutable s (JMap k v) -> k -> ST s (Maybe v)
  native putAll ::  Mutable s (JMap k v) ->  Mutable s (JMap k v) -> ST s ()
  native isEmpty :: Mutable s (JMap k v) -> ST s Bool

data HashMap k v = native java.util.HashMap where
  native new :: () -> STMutable s (HashMap k v)

pure native groupCount :: Matcher -> Int

native fieldValue frege.interpreter.javasupport.JavaUtils.fieldValue ::
  String -> String -> InterpreterClassLoader -> ST s (Maybe a)

native sandboxFieldValue frege.interpreter.javasupport.JavaUtils.sandboxFieldValue ::
  String -> String -> String -> StringWriter -> StringWriter -> InterpreterClassLoader -> IO (Maybe a)

pure native longToString Long.toString :: Long -> Int -> String

pure native showNative String.valueOf :: a -> String
pure native throwableCause getCause :: Throwable -> Maybe Throwable

data Method = pure native java.lang.reflect.Method where
  pure native getName :: Method -> String

pure native split :: String -> String -> JArray String