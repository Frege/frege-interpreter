module frege.scriptengine.FregeScriptEngine where

import frege.interpreter.FregeInterpreter
import Data.List (intersperse)
import frege.Prelude hiding (init)

native module where {

    private static final String FREGE_BINDINGS_KEY = "frege.scriptengine.bindings";
    private static final String PRELUDE_SCRIPT_CLASS_NAME = "frege.scriptengine.PreludeScript";
    private static final String PRELUDE_SCRIPT_KEY = "frege.scriptengine.preludeScript";

    public static class FregeScriptEngineFactory implements javax.script.ScriptEngineFactory {

      private static final java.util.List<String> NAMES = java.util.Arrays.asList("fr", "frege");


      @Override
      public String getEngineName() {
        return "frege";
      }

      @Override
      public String getEngineVersion() {
        return "1.0";
      }

      @Override
      public java.util.List<String> getExtensions() {
        return NAMES;
      }

      @Override
      public java.util.List<String> getMimeTypes() {
        return java.util.Arrays.asList("");
      }

      @Override
      public java.util.List<String> getNames() {
        return NAMES;
      }

      @Override
      public String getLanguageName() {
        return "frege";
      }

      @Override
      public String getLanguageVersion() {
        return frege.Version.version;
      }

      @Override
      public Object getParameter(final String key) {
        return null;
      }

      @Override
      public String getMethodCallSyntax(final String obj, final String m, final String... args) {
        return null;
      }

      @Override
      public String getOutputStatement(final String toDisplay) {
        return null;
      }

      @Override
      public String getProgram(final String... statements) {
        return null;
      }

      @Override
      public javax.script.ScriptEngine getScriptEngine() {
        try {
          return new JFregeScriptEngine(this);
        } catch (final Throwable e) {
          e.printStackTrace();
        }
        return null;
      }

    }

    private static class FregeBindings extends javax.script.SimpleBindings {

      @Override
      public Object put(String key, Object value) {
        checkKey(key);
        String existingKey = findExistingVariable(key);
        if (existingKey != null) {
          remove(existingKey);
        }
        return super.put(key, value);
      }

      private String findExistingVariable(String key) {
        String keyName = getVariableName(key);
        for (String thatKeyName: keySet()) {
          if (getVariableName(thatKeyName).equals(keyName)) {
            return thatKeyName;
          }
        }
        return null;
      }

      private String getVariableName(String key) {
        return key.split("::")[0].trim();
      }

      private void checkKey(Object key) {
        if (key == null) {
            throw new NullPointerException("key can not be null");
        }
        if (key.equals("")) {
            throw new IllegalArgumentException("key can not be empty");
        }
      }
    }

    public static class JFregeScriptEngine extends javax.script.AbstractScriptEngine implements
      javax.script.Compilable {

    private final javax.script.ScriptEngineFactory factory;

    public JFregeScriptEngine(final javax.script.ScriptEngineFactory factory) {
        super(new FregeBindings());
        this.factory = factory;
        frege.prelude.PreludeBase.TST.run(
          frege.scriptengine.FregeScriptEngine.init(this, factory)).call();
    }

    @Override
    public Object eval(final String script, final javax.script.ScriptContext context)
        throws javax.script.ScriptException {
        frege.prelude.PreludeBase.TST.performUnsafe(
            frege.scriptengine.FregeScriptEngine.removeBindingVars(this, context)).call();

        bindVarsAndLoadPrelude();

        Object res = frege.prelude.PreludeBase.TST.performUnsafe(
          frege.scriptengine.FregeScriptEngine.eval(script, context)).call();
        if (res instanceof frege.prelude.PreludeBase.TMaybe) {
            frege.prelude.PreludeBase.TMaybe maybe = (frege.prelude.PreludeBase.TMaybe) res;
            if (frege.prelude.Maybe.isJust(maybe)) {
                return unwrapThunk(frege.prelude.Maybe.unJust(maybe));
            }
        }
        return null;
    }

    @Override
    public Object eval(final java.io.Reader reader, final javax.script.ScriptContext context)
      throws javax.script.ScriptException {
      String script = new java.util.Scanner(reader).useDelimiter("\\A").next();
      return eval(script, context);
    }

    @Override
    public javax.script.Bindings createBindings() {
        return new javax.script.SimpleBindings();
    }

    @Override
    public javax.script.ScriptEngineFactory getFactory() {
        return this.factory;
    }

    @Override
    public javax.script.CompiledScript compile(final String script) throws javax.script.ScriptException {
      return frege.prelude.PreludeBase.TST.performUnsafe(
        frege.scriptengine.FregeScriptEngine.compile(this, script, context)).call();
    }

    @Override
    public javax.script.CompiledScript compile(final java.io.Reader reader) throws javax.script.ScriptException {
      return frege.prelude.PreludeBase.TST.performUnsafe(
        frege.scriptengine.FregeScriptEngine.compileReader(this, reader, context)).call();
    }

    private void bindVariable(String key, Object value) {
          final String[] nameAndType = key.split("::");
        final String name = nameAndType[0].trim();

        if (name.equals("import")) {
          frege.prelude.PreludeBase.TST.performUnsafe(
            frege.scriptengine.FregeScriptEngine.addImport(this, context, value.toString())).call();
        } else {
          final String type = nameAndType.length < 2 ? "a" : nameAndType[1].trim();
          frege.prelude.PreludeBase.TST.performUnsafe(
            frege.scriptengine.FregeScriptEngine.put(this, context, key, value)).call();
        }
    }

    private void bindVarsAndLoadPrelude() {
      java.util.Map<String, Object> bindings = getBindings(javax.script.ScriptContext.ENGINE_SCOPE);
      if (hasVars(bindings)) {
        for (java.util.Map.Entry<String, Object> entry: new java.util.HashSet<>(bindings.entrySet())) {
          if (isUserBindingVar(entry.getKey()))
            bindVariable(entry.getKey(), entry.getValue());
        }
        frege.prelude.PreludeBase.TST.performUnsafe(
          frege.scriptengine.FregeScriptEngine.loadScriptingPrelude(context)).call();
      }
    }

    @Override
    public void put(final String key, final Object value) {
      getBindings(javax.script.ScriptContext.ENGINE_SCOPE).put(key, value);
    }
  }

  public static Object unwrapThunk(Object thunk) {
        if (thunk instanceof frege.run8.Thunk) {
            return ((frege.run8.Thunk) thunk).call();
        } else if (thunk instanceof frege.run7.Thunk) {
            return ((frege.run7.Thunk) thunk).call();
        } else {
            return thunk;
        }
    }

  public static Object jEvalSym(final javax.script.ScriptContext context,
                           final frege.interpreter.javasupport.InterpreterClassLoader classLoader,
                           final String className,
                           final String varName) throws javax.script.ScriptException {
      final Object res;
      java.util.Map<String, Object> bindings = context.getBindings(javax.script.ScriptContext.ENGINE_SCOPE);
      try {
          if (bindings != null && hasVars(bindings)) {
              Class<?> preludeClass = classLoader.loadClass(PRELUDE_SCRIPT_CLASS_NAME);
              injectValues(bindings, preludeClass);
          }
          res = frege.interpreter.javasupport.JavaUtils.fieldValue(className, varName, classLoader);
      } catch (Exception exception) {
          throw new javax.script.ScriptException(exception);
      }

      return res;
  }

  private static boolean hasVars(java.util.Map<String, Object> bindings) {
    if (bindings == null) return false;
    for (final java.util.Map.Entry<String, Object> entry: bindings.entrySet()) {
          if (isUserBindingVar(entry.getKey())) {
            return true;
          }
    }
    return false;
  }

  private static boolean isUserBindingVar(String varName) {
    return !varName.startsWith("frege.scriptengine.") && !varName.endsWith("fregeScriptEngineVar");
  }

  public static void injectValues(final java.util.Map<String, Object> bindings,
	    final Class<?> clazz) {
      try {
        for (final java.util.Map.Entry<String, Object> entry: bindings.entrySet()) {
          if (entry.getKey().endsWith("fregeScriptEngineVar")) {
            final java.lang.reflect.Field field = clazz.getDeclaredField(entry.getKey());
            final Ref ref = (Ref) field.get(null);
            ref.set(entry.getValue());
          }
        }
      } catch (final Exception e) {
        throw new RuntimeException(e);
      }
  }

  public static javax.script.CompiledScript newFregeCompiledScript(
    String script,
    javax.script.ScriptEngine scriptEngine,
    frege.interpreter.FregeInterpreter.TInterpreterConfig config,
    frege.interpreter.FregeInterpreter.TInterpreterResult result,
    frege.interpreter.javasupport.InterpreterClassLoader classLoader) {
    return new FregeCompiledScript(script, scriptEngine, config, result, classLoader);

  }

  public static class FregeCompiledScript extends javax.script.CompiledScript {

    private String script;
    private javax.script.ScriptEngine scriptEngine;
    private frege.interpreter.FregeInterpreter.TInterpreterConfig config;
    private frege.interpreter.FregeInterpreter.TInterpreterResult result;
    private frege.interpreter.javasupport.InterpreterClassLoader classLoader;

    public FregeCompiledScript(
      String script,
      javax.script.ScriptEngine scriptEngine,
      frege.interpreter.FregeInterpreter.TInterpreterConfig config,
      frege.interpreter.FregeInterpreter.TInterpreterResult result,
      frege.interpreter.javasupport.InterpreterClassLoader classLoader) {

      this.script = script;
      this.scriptEngine = scriptEngine;
      this.config = config;
      this.result = result;
      this.classLoader = classLoader;
    }

    @Override
    public Object eval(final javax.script.ScriptContext context) throws javax.script.ScriptException {
        return frege.prelude.PreludeBase.TST.performUnsafe(
          FregeScriptEngine.evalResult(script, config, context, result, classLoader)).call();
    }

    @Override
    public javax.script.ScriptEngine getEngine() {
        return scriptEngine;
    }
  }

  /**
   * Used in Frege Script Engine to pass values from host environment to scripting
   * environment
   *
   * @param <A>
   */
  public static class Ref<A> {

    private A value;

    public A get() {
      return value;
    }

    public void set(final A value) {
      this.value = value;
    }

  }

}

eval :: String -> MutableIO ScriptContext -> IO (Maybe Object)
eval !script !context = do
  state <- getInterpreterState context
  config <- getInterpreterConfig context
  (res, newState) <- Interpreter.run (interpret script) config state
  evalResult script config context res newState

evalResult :: String -> InterpreterConfig -> MutableIO ScriptContext -> InterpreterResult -> MutableIO InterpreterClassLoader -> IO (Maybe Object)
evalResult !script !config !context !res !state = do
  case res of
    InterpreterResult.Success{sourceRepr=sourceRepr, compilerState=g} -> do
      case sourceRepr of
        Module moduleName -> do
          context.setAttribute classLoaderKey state ScriptContext.engineScope
          return Nothing
        Definitions syms -> do
          let updatePredefs predefs = predefs ++ "\n" ++ script
              newConfig = config.{predefs<-updatePredefs}
          context.setAttribute configKey newConfig ScriptContext.engineScope
          return Nothing
        Expression sym | isVariable g sym -> do
          let className = symbolClass sym g
              varName = symbolVar sym g
          Just <$> evalSym context state className varName
        Expression sym = return Nothing
    InterpreterResult.Failure messages -> error $ show messages

compile :: MutableIO ScriptEngine -> String -> MutableIO ScriptContext -> IOMutable CompiledScript
compile !engine !script !context = do
  state <- getInterpreterState context
  config <- getInterpreterConfig context
  (res, newState) <- Interpreter.run (interpret script) config state
  createFregeCompiledScript script engine config res newState

compileReader :: MutableIO ScriptEngine -> MutableIO Reader -> MutableIO ScriptContext -> IOMutable CompiledScript
compileReader !engine !reader !context = do
  bufReader <- BufferedReader.new reader
  lines <- bufReader.getLines
  compile engine (fold (++) "" $ intersperse "\n" lines) context

put :: MutableIO ScriptEngine -> MutableIO ScriptContext -> String -> Object -> IO ()
put !engine !context !key !value = do
  let xs = map trim . toList $ split key "::"
      f name typ = do
                    bindVariable engine context name typ
                    updatePreludeScript engine context name typ
                    updateBindings engine context value name
  case xs of
    (name: typ: _) -> f name typ
    (name: _) -> f name "a"
    _ -> pure ()

removeBindingVars :: MutableIO ScriptEngine -> MutableIO ScriptContext -> IO ()
removeBindingVars !engine !context = do
  config <- getInterpreterConfig context
  preludeScript <- context.getAttribute fregePreludeScriptKey ScriptContext.engineScope
  let newPreludeScript = unlines . filter (not . isVarDef) . lines $ fromMaybe "" (asString <$> preludeScript)
      newPredefs = unlines $ filter (not . isVarDef) $ lines config.predefs
      newConfig = config.{predefs=newPredefs}
      isVarDef line = line.contains "fregeScriptEngineVar"
  context.setAttribute fregePreludeScriptKey newPreludeScript ScriptContext.engineScope
  context.setAttribute configKey newConfig ScriptContext.engineScope

bindVariable :: MutableIO ScriptEngine -> MutableIO ScriptContext -> String -> String -> IO ()
bindVariable engine context name typ = do
  config <- getInterpreterConfig context
  let newScript = String.format "\n%1$s :: %2$s--fregeScriptEngineVar\n%1$s = FregeScriptEngineRef.get %3$s" name typ
                    (name ++ "fregeScriptEngineVar")
  updateCurrentScript engine context newScript

updateCurrentScript :: MutableIO ScriptEngine -> MutableIO ScriptContext -> String -> IO ()
updateCurrentScript engine context script = do
  config <- getInterpreterConfig context
  let importIfNecessary = if config.predefs.contains preludeImport then "" else preludeImport ++ "\n"
      newPredefs = config.predefs ++ "\n" ++ importIfNecessary ++ script
      newConfig = config.{predefs=newPredefs}
  context.setAttribute configKey newConfig ScriptContext.engineScope

addImport :: MutableIO ScriptEngine -> MutableIO ScriptContext -> String -> IO ()
addImport !engine !context !imp = do
  config <- getInterpreterConfig context
  preludeScript <- context.getAttribute fregePreludeScriptKey ScriptContext.engineScope
  let importScript = "\nimport " ++ imp ++ "\n"
      newPreludeScript = fromMaybe "" (fmap asString preludeScript) ++ importScript
  context.setAttribute fregePreludeScriptKey newPreludeScript ScriptContext.engineScope
  updateCurrentScript engine context importScript

updatePreludeScript :: MutableIO ScriptEngine -> MutableIO ScriptContext -> String -> String -> IO ()
updatePreludeScript engine context name typName = do
  let typ = "FregeScriptEngineRef (" ++ typName ++ ")"
      newDef = String.format ("\n%1$s :: %2$s\n" ++ "!%1$s = IO.performUnsafe $ FregeScriptEngineRef.new ()\n")
                 (name ++ "fregeScriptEngineVar") typ
  preludeScript <- context.getAttribute fregePreludeScriptKey ScriptContext.engineScope
  let newPreludeScript = fromMaybe "" (fmap asString preludeScript) ++ "\n" ++ newDef
  context.setAttribute fregePreludeScriptKey newPreludeScript ScriptContext.engineScope

updateBindings :: MutableIO ScriptEngine -> MutableIO ScriptContext -> Object -> String -> IO ()
updateBindings engine context value name = do
  bindings ← context.getBindings ScriptContext.engineScope
  bindings.put (name ++ "fregeScriptEngineVar") value
  return ()

loadScriptingPrelude :: MutableIO ScriptContext -> IO ()
loadScriptingPrelude !context = do
  scriptMaybe <- context.getAttribute fregePreludeScriptKey ScriptContext.engineScope
  maybe (pure ()) (\script -> eval (asString script) context >> pure ()) scriptMaybe

getInterpreterState :: Mutable s ScriptContext -> STMutable s InterpreterClassLoader
getInterpreterState context = do
  classLoaderMaybe <- context.getAttribute classLoaderKey
  maybe (InterpreterClassLoader.new ()) asInterpreterClassLoader classLoaderMaybe

getInterpreterConfig :: Mutable s ScriptContext -> ST s InterpreterConfig
getInterpreterConfig context = do
  configMaybe <- context.getAttribute configKey
  return $ maybe InterpreterConfig.initialState asInterpreterConfig configMaybe

native evalSym frege.scriptengine.FregeScriptEngine.jEvalSym
  :: MutableIO ScriptContext -> MutableIO InterpreterClassLoader -> String -> String -> IO Object throws ScriptException

init :: Mutable s ScriptEngine -> Mutable s ScriptEngineFactory -> ST s ()
init !engine !factory = do
  context <- getContext engine
  context.setAttribute fregePreludeScriptKey preludeDef ScriptContext.engineScope

native getContext :: Mutable s ScriptEngine -> STMutable s ScriptContext

data ScriptEngine = native javax.script.ScriptEngine

data Bindings = native javax.script.Bindings where
  native get :: Mutable s Bindings → String → ST s (Maybe Object)
  native put :: Mutable s Bindings → String → a → ST s ()

data ScriptEngineFactory = native javax.script.ScriptEngineFactory
data ScriptException = native javax.script.ScriptException
derive Exceptional ScriptException

data ScriptContext = native javax.script.ScriptContext where
  pure native engineScope javax.script.ScriptContext.ENGINE_SCOPE :: Int
  native getAttribute :: Mutable s ScriptContext -> String -> ST s (Maybe Object)
                       | Mutable s ScriptContext -> String -> Int -> ST s (Maybe Object)

  native setAttribute :: Mutable s ScriptContext -> String -> a -> Int -> ST s ()
  native getBindings :: Mutable s ScriptContext → Int → STMutable s Bindings

data CompiledScript = native javax.script.CompiledScript

pure native asString "(String)" :: a → String

pure native asInterpreterConfig "(frege.interpreter.FregeInterpreter.TInterpreterConfig)" :: a → InterpreterConfig
native asInterpreterClassLoader "(frege.interpreter.javasupport.InterpreterClassLoader)" :: a → STMutable s InterpreterClassLoader
native asMapStringObject "(java.util.Map)" :: a → IOMutable (JMap String Object)

native createFregeCompiledScript FregeScriptEngine.newFregeCompiledScript
  :: String -> Mutable s ScriptEngine -> InterpreterConfig -> InterpreterResult -> Mutable s InterpreterClassLoader -> STMutable s CompiledScript

fregePreludeScriptKey = "frege.scriptengine.preludeScript"
classLoaderKey = "frege.scriptengine.classloader"
configKey = "frege.scriptengine.currentDefs"
preludeScriptClassName = "frege.scriptengine.PreludeScript"
fregeBindingsKey = "frege.scriptengine.bindings"
preludeImport = "import " ++ preludeScriptClassName

preludeDef =
  "module " ++ preludeScriptClassName ++ " where\n"
  ++ "data FregeScriptEngineRef a = pure native " ++ "frege.scriptengine.FregeScriptEngine.Ref" ++ " where\n"
  ++ "  native new :: () -> ST s (FregeScriptEngineRef a)\n"
  ++ "  pure native get :: FregeScriptEngineRef a -> a\n"
